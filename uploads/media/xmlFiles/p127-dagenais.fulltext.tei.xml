<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/daniellin/Desktop/tldrApp/tldrResearchPaper/grobid-grobid-parent-0.4.4/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.5-dummy" ident="GROBID" when="2017-10-20T05:17+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Creating and Evolving Developer Documentation: Understanding the Decisions of Open Source Contributors</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Barthélémy</forename><surname>Dagenais</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">School of Computer Science</orgName>
								<orgName type="institution">McGill University Montréal</orgName>
								<address>
									<region>QC</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><forename type="middle">P</forename><surname>Robillard</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">School of Computer Science</orgName>
								<orgName type="institution">McGill University Montréal</orgName>
								<address>
									<region>QC</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Creating and Evolving Developer Documentation: Understanding the Decisions of Open Source Contributors</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>D27 [Software Engineering]: Distribution</term>
					<term>Maintenance</term>
					<term>and Enhancement General Terms Documentation</term>
					<term>Experimentation</term>
					<term>Human Factors</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Developer documentation helps developers learn frameworks and libraries. To better understand how documentation in open source projects is created and maintained, we performed a qualitative study in which we interviewed core contributors who wrote developer documentation and developers who read documentation. In addition, we studied the evolution of 19 documents by analyzing more than 1500 document revisions. We identified the decisions that contributors make, the factors influencing these decisions and the consequences for the project. Among many findings, we observed how working on the documentation could improve the code quality and how constant interaction with the projects&apos; community positively impacted the documentation .</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>Developers usually rely on libraries or application frame- works 1 when building applications. Frameworks provide standardized and tested solutions to recurring design prob- lems. For example, hundreds of applications like Google Code Search and Twitter use the JQuery framework to pro- vide an interactive user experience with Javascript and AJAX. <ref type="bibr" target="#b1">2</ref> To use a framework, developers must learn many things such as the domain and design concepts behind the frame- work, how the concepts map to the implementation, and how to extend the framework <ref type="bibr" target="#b11">[12]</ref>. Various types of documents are available to help developers learn about frameworks, ranging from Application Programming Interface documen- tation to tutorials and reference manuals.</p><p>We find though that very little is known generally about the creation and maintenance of developer documentation. For example, the Spring Framework manual 3 has approxi- mately 200 000 words (twice the size of an average novel) and has gone through five major revisions. Creating and main- taining this documentation potentially represents a large ef- fort yet we do not know the kind of problems documentation contributors encounter, the factors they consider when work- ing on the documentation and the impact their documentation- related decisions have on the project. For instance, does documenting a change immediately after making it have dif- ferent consequences than documenting all changes before a release? Answering these questions provides insights about the techniques that are needed to optimize the resources re- quired to create and maintain developer documentation.</p><p>We conducted an exploratory study to learn more about the documentation process of open source projects. Specif- ically, we were interested in identifying the documentation decisions made by open source contributors, the context in which these decisions were made, and the consequences these decisions had on the project. We performed semi-structured interviews with 22 developers or technical writers who wrote or read the documentation of open source projects. In par- allel, we manually inspected more than 1500 revisions of 19 documents selected from 10 open source projects.</p><p>Among many findings, we observed how updating the doc- umentation with every change led to a form of embarrassment- driven development, which in turn led to an improvement in the code quality. We also found that all contributors who originally selected a public wiki to host their documentation eventually moved to a more controlled documentation in- frastructure because of the high maintenance costs and the decrease of documentation authoritativeness. Such observa- tions could enable practitioners to make informed decisions by analyzing the trade-offs encountered by their peers and researchers to build documentation tools that are adapted to the documentation process.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">METHOD</head><p>We based our exploratory study on grounded theory as described by Corbin and Strauss <ref type="bibr" target="#b4">[5]</ref>. Grounded theory is a qualitative research methodology that employs theoretical sampling and open coding to formulate a theory "grounded" in the empirical data. By following grounded theory, we started from general research questions and refined the ques- tions, and the data collection instruments, as the study pro- gressed. As opposed to random sampling, grounded theory involved refining our sampling criteria throughout the course of the study to ensure that the selected participants were able to answer the new questions that have been formulated. For example, after having interviewed two contributors of Perl projects, we filtered out further Perl projects; after hav- ing interviewed four contributors from library projects, we sent more invitations to contributors of framework projects.</p><p>We analyzed the data, collected through interviews and document revisions, using open coding: we assigned codes to sentences, paragraphs, or revisions and we refined them as the study progressed. We then reviewed the codes sev- eral times and linked them to emerging categories, a pro- cess called axial coding. Finally, the goal of a study using grounded theory is to produce a coherent set of hypotheses laid in the context of a process, that originates from empir- ical data. Although all reported observations are linked to specific cataloged evidences, we elide some of these links for the sake of brevity. <ref type="bibr" target="#b3">4</ref> Our method follows that of previous software engineering studies based on grounded theory <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b8">9]</ref>. These references provide an additional discussion on the use of grounded the- ory in software engineering.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Data Collection</head><p>We learned about the documentation process of open source projects by gathering data from three sources. We inter- viewed developers who contributed to open source projects and their documentation (the contributors): these develop- ers were often the founder or the core maintainer of the project. 5 Most of the observations reported in this paper come from these interviews. We also interviewed develop- ers who frequently used open source projects and who read their documentation (the users). We wanted to determine how developers used documentation and what kind of doc- umentation was the most useful to them. Finally, we an- alyzed the evolution of 19 documents from 10 open source projects (the historical analysis). Because some projects started more than 15 years ago, it was often difficult for the participants to remember the various details of the docu- mentation process. Our systematic analysis of the revisions provided us with a more comprehensive and detailed view of that documentation's evolution.</p><p>The projects of the contributors, the users, and the his- torical analysis were selected in parallel so they are not nec- essarily the same. We used this strategy to preserve the anonymity of the contributors and to allow us to provide concrete examples by naming real open source projects when discussing observations from the users' interviews and the historical analysis. Additionally, this sampling strategy en- abled us to perform data triangulation by evaluating our observations on different projects. The Contributors. To recruit contributors, we began by making a list of open source projects that were still being used by a community of users and that were large enough to require documentation to be used. We only selected projects that fulfilled these five criteria:  2. The project was more than one year old.</p><p>3. There was at least one active contributor in the last year (e.g., a contributor answered a question on the mailing list in 2009).</p><p>4. The project had more than 10k lines of source code.</p><p>5. The project had more than 1000 users (measured by the number of downloads, issue reporters, or mailing list subscribers).</p><p>We selected projects from a wide variety of application do- mains and programming languages to ensure that our find- ings were not specific to one domain in particular.</p><p>After having selected a project, we looked at its web site and at the source repository to identify the main documen- tation contributors. When in doubt, we contacted one of the founders or core maintainers. We sent 49 invitations to contributors, 12 of which accepted to do an interview.</p><p>Each contributor who accepted our invitation participated in a 45-minute semi-structured phone interview in which we asked open-ended questions such as "how did the documen- tation evolve in your project?" and "what is your workflow when you work on the documentation?".</p><p>A few contributors talked about various projects they worked on or used, but most contributors focused on one project. The programming language of the projects varied greatly: Perl (2 contributors), Java (2), Javascript (1), C(2), C++ (1), PHP (2), Python (2). The age of the projects ranged from 1.5 years to more than 15 years with an aver- age of 8.7 years. The application domains were also varied: programming language library (4), database or databinding library (3), web application framework (3), blogging plat- form (1), and web server (1). Finally, all of our participants had more than five years of programming or technical writ- ing experience (up to 25 years). The Users. To recruit developers who used open source projects and read documentation, we relied on the list of users of stackoverflow.com, a popular collaborative web site where programmers can ask and answer questions. We wanted to interview users who had various amounts of expertise in terms of programming languages and years of programming experience. Stackoverflow user profiles indicate how many questions each user has asked and answered and the tags associated with these questions (e.g., a question might be related to java and eclipse). We filtered out all users who did not have contact information published on their profile and who were primarily answering questions related to the  .NET platform because we judged that they were less likely to have a rich experience with open source projects. <ref type="bibr" target="#b5">6</ref> We sent 38 invitations and recruited 10 participants. We sent each participant an email asking for a list of open source projects that had good or bad documentation. We purposely did not define good or bad documentation be- cause we wanted the participants to elaborate on their defi- nition during the interview. Each developer participated in a 30-minute semi-structured phone interview that focused on their experience with the documentation of the projects they selected, and then, on their experience with documen- tation in general. <ref type="table" target="#tab_1">Table 1</ref> shows the profile of the developers we interviewed: the number of years of programming experience, the main field they are professionally working in, and the program- ming languages they mentioned during the interview. Most participants used many open source projects as part of their work or as part of hobby projects so their documentation needs are not exclusive to their field of work. The Historical Analysis. We systematically analyzed the evolution of documents of open source projects that maintained their documentation in a source repository (e.g., CVS) or in a wiki. We also used the same criteria as for the contributors to select projects for our historical analysis.</p><p>For each project, we selected from one to four documents. The first document was a tutorial or a similar document that told users how to get started with the project. The second document was a reference (e.g., list of properties). We assumed that these two types of documents were distinct enough that they might exhibit different evolution patterns. We had to analyze a different number of documents per project because there is no documentation standard across projects and it was impossible to compare documents of the same size or of the same nature. For example, documents ranged from a complete manual in one file (e.g., the GTK <ref type="bibr" target="#b5">6</ref> The documentation experience of .NET developers is of interest, but not for this particular study on open source projects. We are aware that with the CodePlex project ( <ref type="bibr">www.codeplex.com)</ref>, open source projects in .NET are be- coming more mainstream. Tutorial) to document sections separated in small files and presented on many pages (e.g., Eclipse help files).</p><p>We analyzed the history of the documents by looking at their change comments and by comparing each version of the documents. This was necessary because often the change comment was not clear enough. For example, a commit comment mentioned fixing a "typo", but in fact, the actual change shows a code example being modified. Through sev- eral passes of open coding, we assigned a code to each revi- sion to summarize the rationale behind the change. <ref type="table" target="#tab_3">Table 2</ref> shows descriptive statistics of the documents we inspected such as the time between the first and last revision that we could find (in years), the number of change sets (#CS), the number of different committers who modified the files (#C), and the percentage of revisions that originated from community contributions (%CC). We report the details of the revision classification in Appendix A.</p><p>We considered that all revisions that mentioned a bug number, a contributed patch, or a post from a forum or a mailing list originated from the community. It was not always possible to determine the source of the change when the documents were hosted on a wiki, so we indicated "wiki" in the table. <ref type="bibr" target="#b6">7</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">CONCEPTUAL FRAMEWORK</head><p>Following the analysis of the interviews and the document revisions, we identified three production modes in which doc- umentation of open source projects is created. Although we expected documentation to be produced in different modes, the study helped us concretize what these modes were and what they corresponded to in practice. These production modes guided our analysis of the main decisions made by contributors (Section 4). <ref type="figure" target="#fig_0">Figure 1</ref> depicts how the docu- mentation effort was distributed in the lifecycle of the open source projects we studied. First, contributors create the initial documentation, which requires an upfront effort that is higher than the regular maintenance effort. Then, as the software evolves, contributors incrementally change the doc- umentation in small chunks of effort (e.g., spending 20 min- utes to clarify a paragraph). Sometimes, major documen- tation tasks such as the writing of a book on the project requires a burst of documentation effort. In addition to the three production modes, we note that documentation writers make important decisions at specific decisions points. As illustrated in <ref type="figure">Figure 2</ref>, decisions are influenced by contextual factors and they have consequences in terms of required effort and impacts for the project. This paper focuses on the relationships between the decisions, their factors, and their consequences.</p><p>For example, for the decision point "When to adapt the documentation to the project's evolution", there are many possible decisions (e.g., updating the documentation shortly after making a change, before an official release, before mak- ing a change, etc.). The decisions related to a decision point are not mutually exclusive, but each decision has some specific effort and impact associated with it. The conse- quences of a decision can also become a factor over time. For example, four contributors sought to document their changes as quickly as possible after realizing that they of- ten improved their code while documenting. We analyzed the consequences of the documentation decisions from many perspectives (contributors, users, and evolution) to evaluate the trade-offs involved with each decision.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">DECISIONS</head><p>We provide an overview of the documentation production modes and the decisions points. Then, we discuss in detail the six decisions that had the largest impact on the docu- mentation creation and maintenance of the projects we stud- ied, as determined by our analysis. Underlined sentences represent major observations for each decision. <ref type="table" target="#tab_5">Table 3</ref> pro- vides a summary of the consequences of these six decisions on five aspects of open source projects. Initial Effort. When a project starts, contributors en- counter two main decision points. First, contributors must select tools to create, maintain, and publish the documen- tation. There are three main types of infrastructure that are used by contributors, sometimes in combination with each other: wikis (see Section 4.1), documentation suites (e.g., POD, Sphinx, or Javadoc), and general documents such as HTML. In our historical analysis, we observed that the editing errors (e.g., forgetting a closing tag) caused by the syntax of any documentation infrastructure were respon- sible for an important amount of changes and that better tool support could probably mitigate this problem: 55.4% in Eclipse (HTML), 11.4% in Django (Sphinx), 11.1% in GTK (SGML), and 6.7% in WordPress (wiki).</p><p>A second decision point that developers encounter early on concerns the type of documentation to create. Contribu- tors typically create one type of documentation initially and the documentation covers only a subset of the code. Then, as the project evolves, contributors create more documents of various kinds. After analyzing the interviews of both con- tributors and users, we identified three types of documenta- tion based on their focus: a task is the unit of getting started documentation (Section 4.2), a programming language ele- ment (e.g., a function) is the unit of reference documentation (Section 4.3), and a concept is the unit of conceptual docu- mentation. These documentation types are consistent with some previous classification attempts <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b2">3]</ref>. Incremental Changes. Small and continuous incremen- tal changes are the main force driving the evolution of open source project documentation. We noticed in our histori- cal analysis that all changes except a few structural changes and the first revisions concerned a few words or a few lines of code and that these changes occurred regularly through- out the project history (see <ref type="table">Table 4</ref> in the Appendix). In this production mode, open source contributors encounter two major decision points: how to adapt the documentation to the project's evolution and how to manage the project community's contributions.</p><p>We found in our historical analysis that software evolution motivated at least 38% of the revisions to the documents we analyzed (adaptation and addition changes). We encoun- tered five strategies (i.e., decisions) that contributors used to adapt the documentation to the project's evolution: con- tributors (1) updated the documentation with each change (Section 4.4), (2) updated the documentation before each release, (3) relied on a documentation team to document the changes (Section 4.5), (4) wrote the documentation be- fore the change and used it as a specification, or (5) did not document their changes.</p><p>The second decision point contributors encounter is to determine how to manage the documentation contributions from the community. These contributions come in various forms: (1) documented code patches (Section 4.4), (2) doc- umentation patches, (3) documentation hosted outside the official project's web site, (4) comments and questions asked on official support channels (Section 4.6), and (5) exter- nal support channels such as stackoverflow.com. Managing the documentation contributions represents a large fraction of the documentation effort: in our historical analysis, we found that 28% of the document revisions, excluding docu- ments on wikis, originated from the community. Bursts. During a project's lifetime, the documentation oc- casionally goes through major concerted changes that we call bursts. These changes improve the quality of the doc- umentation, but they require such effort that they are not done regularly.</p><p>Publishers sometimes approach contributors of open source projects to write books about their projects: six contributors in our study mentioned that they (or their close collabora- tors) wrote books. One consequence of writing books is that contributors think more about their design decisions: "it forced me to be more precise, to think carefully about what I wrote"C3. 8 This particular contributor made many small changes to clarify the content of the official documentation while he was writing the book. Because books about open source projects are not always updated, their main advan- tage lies in the improvement of the quality of the official documentation and the time that the contributors take to reflect on their design decisions.</p><p>Contributors also change the documentation infrastruc- ture when it becomes too costly to maintain. Maintenance issues either come from custom tool chains, "it is so complex that our release manager can't build the documentation on his machine"C4, or from a barrier of entry that is not high enough (e.g., wiki).</p><p>The last type of burst efforts are the major reviews initi- ated by the documentation contributors themselves. During these reviews, contributors can end up rewriting the whole documentation (C5) or simply restructuring its table of con- tents (C8). We observed that major reviews lasted from six weeks (C7) to three years (C9).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Wiki as Documentation Infrastructure</head><p>We begin our description of major decisions with the se- lection of a public wiki to host the documentation infras- tructure. Wikis enable contributors to easily create a web site that allows anybody to contribute to the documenta- tion, offers a simple editing syntax, and automatically keeps track of the changes to the documentation. Context. Contributors select wikis to host their documen- tation when the programming language of the project is not associated with any infrastructure (such as CPAN with Perl) or when the project contributors want to rely on crowdsourc- ing to create documentation, i.e., they hope that users will create and manage the documentation.</p><p>Public wikis also offer one of the lowest barriers to entry: the contribution is one click away. According to contribu- tors like C7, it is a powerful strategy to build a community around the project: C7 started to contribute on his project by fixing misspelled words. Consequences. Although wikis initially appear to be an interesting choice for contributors, all the projects we sur- veyed that started on a wiki (4 out of 12) moved to an in- frastructure where contributions to the documentation are more controlled. As one contributor mentioned: "the quality of the contributions... it's been <ref type="bibr">[hesitating]</ref> ok... sometimes <ref type="bibr">[it]</ref> isn't factual so we had to change that... but the problem has been SPAM"C1. Indeed, we observed in our historical analysis that projects on wikis are often plagued by SPAM (24.1% of the revisions in Firefox) or by the addition of URLs that do not add any valuable content to the documentation (e.g., a link to a tutorial in a list already containing 20 links).</p><p>Another problem with wikis is that they lack authorita- tiveness, an important issue according to our users: "I don't want to look at a wiki that might be outdated or incorrect"U3 For example, we observed cases such as a revision in a Fire- fox tutorial where one line of a code example was erroneously modified (possibly in good faith). The change was only dis- covered and reverted one day later (June 13th 2006).</p><p>Finally, because the barrier to entry is low, i.e., there is not much effort required to modify the documentation, the documentation can become less concise and focused over time: "there's a user-driven desire to make sure that every single possible situation is addressed by the documentation.</p><p>[these situations] were unhelpful at best and just clutter at worst"C5. According to C7, managing public wikis of large projects is a full-time job. Alternatives. As users and contributors mentioned, the community is less inclined to contribute documentation than it is to contribute code, so the barrier to contribute docu- mentation must be lower than the barrier to contribute code. Still, there exist mechanisms that encourage user contribu- tions and that do not sacrifice authoritativeness, such as al- lowing user comments at the bottom of documents. Another strategy is to explicitly ask for feedback within the docu- ments. For example, we observed in our historical analysis that Django provides a series of links to ask a question or to report an issue with the documentation on every page. Hi- bernate provides a similar link on the first page of the man- ual only. We could not find such a link in the Eclipse docu- mentation. This strategy could explain in part the number of revisions that were motivated by the community: Django: 48%, Hibernate: 10%, and Eclipse: 10%.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Getting Started as Initial Documentation</head><p>Getting started documentation describes how to use a par- ticular feature or a set of related features. It can range from a small code snippet (e.g., the synopsis section at the be- ginning of a Perl module) to a full scale tutorial (e.g., the four-part tutorial of Django). Context. Contributors create getting started documenta- tion as the first type of documentation so that users can install and try the project as quickly as possible. Contrib- utor C8 mentioned that for open source projects, getting started documentation is the best kind of documentation to start with because once a user knows how to use the basic features, it is possible to look at the source code to learn the details of the API.</p><p>For seven contributors, "getting started" documentation has not only a training purpose, but it also serves as a marketing tool, it should "hook users"C1, specifically when there are many projects competing in the same area. In con- trast, the contributors of the five oldest projects reported that there was no marketing purpose behind the getting started documentation: these projects were the first to be released in their respective field and the contributors wrote the documentation for learning purpose only.</p><p>Contributors of libraries that offer atomic functions that do not interact with each other felt that getting started documentation was difficult to create because no reasonable code snippet could give an idea of the range of features of- fered by the libraries. These contributors still tried to create a document that listed the main features or the main differ- ences with similar libraries. Consequences. The importance of getting started docu- mentation was confirmed by users who mentioned examples of projects they selected because their documentation en- abled them to get started faster and to get a better idea of the provided features. For example, U5 selected Django over Rails because the former had the best getting started documentation, even though the latter looked more "power- ful"U5. C2 confirmed that users evaluate Perl projects by looking at their synopsis.</p><p>Writing getting started documentation is challenging though: "technical writing... I didn't have much exposure... I got used to it to some degree, but it is a challenge... it can take a lot of time"C6. Finding a good example on which to base the getting started documentation, an example that is realistic but not too contrived, is difficult (C11).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Reference Documentation as Initial Documentation</head><p>Contributors may decide to initially focus on reference documentation by systematically documenting the API, the properties, the options and the syntax used by a project.</p><p>Context. When a library offers mostly atomic functions, reference documentation is the most appropriate documen- tation type to begin with because, as contributor C11 men- tioned, it can be difficult to create getting started documen- tation that shows examples calling many functions.</p><p>In contrast to libraries with atomic functions, frameworks expecting users to extend and use the framework in some specific ways need more than reference documentation ac- cording to the users we interviewed. Frameworks, by their nature, require users to compose many parts together, but reference documentation only focuses on one part at the time: "interactions between these classes is often very dif- ficult to get a grasp of... you need more information how the overall structure of the framework works"U4.</p><p>When contributors initially create the reference documen- tation, they either systematically document all parts of their projects or they rely on a more pragmatic approach: "I try to go for anything that is not obvious"C10. Indeed, most pro- gramming languages are self-documenting when the types and members are clearly named. Users repeatedly confirmed that when a function has a clear name and a few well-named parameters, they will just try to call the function and will only seek the documentation if they encounter a problem. In statically typed languages such as Java, developers will use auto-complete to learn about the possible types and mem- bers and in dynamic languages such as Python, developers will execute code in an interpreter and call functions such as help() (displays API documentation) to learn more about a program. For weakly and statically typed languages such as C, developers cannot rely on type names (because many types are integer pointers) or on an facilities provided by an interpreter and reference documentation becomes more important. One user mentioned that the equivalent of an empty API documentation with only the type name, (e.g., Doxygen), could save him hours of source code exploration. Consequences. Comprehensive reference documentation, especially for libraries, can contribute to the success of a project. For example, contributor C1 ensured that all func- tions of his project were documented before releasing the first version. According to C1, even if his project launched a year after a competing project, the user base grew quickly because the competing project had no documentation. Nowa- days, although there are at least four other libraries provid- ing similar features, C1's project has the largest user base and C1 attributes this success in large part to the documen- tation, a claim that was confirmed by four users.</p><p>In terms of effort, reference documentation is the easiest type of documentation to create according to the contribu- tors we interviewed. For example, when C4 works with a developer who does not have strong technical writing skills, C4 works on the getting started documentation and let his colleague works on the reference documentation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Documentation Update with Every Change</head><p>One strategy to adapt the documentation to a project's evolution is to document a change quickly after implement- ing it or requiring external developers to include documen- tation and tests with the code they contribute. Context. Although all projects except two have a policy that all changes must be documented before a new version is released, we observed that seven contributors preferred to document their changes shortly after making them instead of waiting just before the release. These developers considered that documentation was part of their change task and they saw many benefits to this practice (described below).</p><p>Contributors C4, C8, and C10 ask external contributors to document their code contribution These three contributors want to ensure that the coverage of the code by the docu- mentation stays constant and that the contribution is well thought-out. Contributors sometimes bend this policy to en- courage more code contributions. For example, C10 accepts code contributions without documentation for his smaller projects or for experimental features in larger projects. Consequences. Documenting changes as they are made ensures that all the "user-accessible features are documented"C1, a documentation property that users often mentioned.</p><p>Another, perhaps more surprising, advantage of updat- ing the documentation with every change is that it leads to a form of "embarrassment-driven development <ref type="bibr">[EDD]</ref>: when you have to demo something, and documentation is almost like having a demo, you'll fix it [usability issue] if it's re- ally annoying"C10. Contributors reported that they modi- fied their code while working on the documentation of their project to attempt to: (1) adopt a clearer terminology, (2) add new tools to reduce the time it takes to use the project, (3) improve the design of their project, or (4) improve the usability of the API.</p><p>We observed that EDD happens when contributors are working on getting started documentation and are describ- ing how to accomplish common tasks: this is when con- tributors take the perspective of the users and must com- pose many parts of the technology together. EDD is pos- sible when the development process exhibits these proper- ties: contributors who write the documentation have code commit privileges, these contributors can modify the code without going through a lengthy approval process, and the documentation process is not totally separated from the cod- ing process. For example, C4 mentioned that he tried to write documentation as soon as possible in the development process: "it's common that I discover that when I'm writing <ref type="bibr">[documentation]</ref> I need to change the design of the library because I discover that my design isn't explainable"C4.</p><p>Nevertheless, two contributors minimized the benefit of embarrassment-driven development. For example, in the project of C9, many contributors review each code change so most usability or design problems are caught during the review phase and not while writing documentation. Con- tributor C11 added that for libraries that provide atomic functions, unit tests covering the common scenarios will also enable developers to detect API usability issues (e.g., is it easy to call this method in the unit test?).</p><p>One advantage of requiring code contribution to be docu- mented is that it helps project maintainers to evaluate large contributions: "I start with the documentation: if the doc- umentation is good I have fairly good confidence in the im- plementation. It's pretty hard to have a well-documented system that is badly implemented"C4.</p><p>As users mentioned, one potential issue with requiring that all changes be documented is that developers might write content-free documentation: comprehensive policies established by C1 such as requiring a code example for each function help developers avoid this issue.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Use of a Separate Documentation Team</head><p>Three contributors, C5, C7, and C12, were part of a ded- icated documentation team in their project.</p><p>Context. We observed that external contributors formed documentation teams and officially joined a project when the original code contributors believed that documentation was important to their project, but lacked motivation (i.e., they preferred to write code) or confidence in their docu- mentation skills.</p><p>We observed two types of documentation teams. The first type (C5 and C7) is responsible for documenting everything, from the new features to in-depth tutorials. The other type (C12) is responsible for improving the documentation such as adding examples, polishing the writing style, or complet- ing the documentation, but code contributors are still re- sponsible for documenting their changes. Consequences. Relying on a documentation team to doc- ument most changes (first type of team) had many disadvan- tages. First, code contributors outnumbered documentation contributors so the documentation lagged behind the imple- mentation of new features, a situation that led to frustration, both for the users and the documentation team:"our release cycle should include documentation itself, [we need] more than just API reference, [we need] prose that covers kind of usages things. We're releasing tons of code..., but there is no documentation for it and people got frustrated"C5. A second disadvantage was that developers who implemented the change did not become aware of usability issues on their own. All contributors who were in a documentation team mentioned that they sometimes acted as testers and reported issues with new features to the developers, but developers were not always receptive to their comments: "somebody made a decision and it became that 'name', meanwhile some- one in the documentation had made <ref type="bibr">[another]</ref> decision on what the name would be... It was a very big struggle in nam- ing things: [the developer name] confuses lots of things"C7. In contrast, C12, who is part of the second type of team, mentioned that the development team usually let the docu- mentation team work on the terminology.</p><p>Contributors C7 and C12 mentioned that having a doc- umentation team lowers the barrier to entry: users with no advanced knowledge of a programming language can still contribute to the documentation and become an official con- tributor with commit privileges.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.6">Documentation Updates based on Questions</head><p>One strategy used by contributors to leverage the com- munity is to consider questions asked on support channels (e.g., mailing list) to be a bug report on the documentation.</p><p>Context. The best example of this strategy came from Contributor C9 who sent us a list of emails that had been exchanged on the mailing list about an unclear section in the documentation. The exchange started with a question about the difference between two parameters: "I see six emails... The problem is that the nuance of this particular command was really not clearly spelled out... This is a case where we really aren't doing our job"C9. C9 then attempted to edit the problematic section in the documentation and submitted a patch for review to the mailing list. After a few email exchanges with other contributors, C9 further edited the section and committed his changes. Overall, the change took at most 20 minutes. Other contributors described a similar experience when managing questions. Consequences. Community feedback is essential to write clear documentation: "when I write documentation, I skip things which need to be documented. But I am not aware of that. It's impossible to get around that problem unless you actually have someone else... who does not understand the details about the system"U4. In our historical analysis of changes, we found that more than half of the clarifica- tion changes (102 out of 195) were about explicitly stating something that was implied, such as adding an extra step to a tutorial. Community feedback helps locate these parts of the documentation that needs clarification and that could not have been foreseen by the contributors.</p><p>The main effort when continuously improving the doc- umentation does not lie in the changes themselves but in constantly looking for occasions to improve the documenta- tion. As C12 said, only a small percentage of the community contribute through the various channels (IRC, mailing list, bugs). A question raised by one individual on the mailing list might actually be asked by many more users. Many tricks are then used to evaluate if a question should be addressed by the documentation: was the question asked many times, is the answer provided by the community right or wrong, is the question addressed at all by the documentation, and is the question about an English-related issue and asked by a non-native English speaker?</p><p>Finally, users mentioned that they look for the presence of a live community when selecting a project: an active sup- port channel gives some assurance to the users that their questions will be answered if they encounter any problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.7">Summary</head><p>The decisions made by contributors have been presented as part of the documentation production modes and the de- cision points, which is useful to understand the context of these decisions. Yet, the consequences of the decisions for the contributors and the users are orthogonal to the doc- umentation process. <ref type="table" target="#tab_5">Table 3</ref> shows the main consequence of the six decisions presented in Section 4 for five aspects of open source projects: the documentation creation effort, the documentation maintenance effort, the project adoption, the number and quality of community contributions, and the learnability of the technology. For each consequence, we indicate the number of contributors (C) or users (U) who discussed it. Because our questions and selection criteria evolved as the study progressed, these numbers reflect the variety of observations we gathered for each consequence: a quantitative study with a larger sample would form a natu- ral step to evaluate the frequencies of these consequences.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">QUALITY AND CREDIBILITY</head><p>We evaluated the quality (are the findings innovative, thought- ful, useful?) and the credibility (are the findings trustworthy and do they reflect the participants', researchers', and read- ers' experiences with a phenomenon?) of our study by rely- ing on three criteria proposed by Corbin and Strauss <ref type="bibr">[5, p. 305]</ref>: fit, applicability, and sensitivity. These evaluation cri- teria are more relevant for a qualitative study than the usual threats to validity associated with quantitative studies <ref type="bibr">[6, p.202]</ref>. The goal of our study was not to generalize a phe- nomenon observed in a sample to a population: instead we are generating a theory about a complex phenomenon from a set of observations obtained through theoretical sampling.</p><p>We produced a four-page summary presenting a subset of the decisions we analyzed and we invited the 12 contrib- utors to review this summary to ensure that our findings resonated with their experience. Six contributors accepted our invitation and responded to a short questionnaire. Fit. "Do the findings fit/resonate with the professionals for whom the research was intended and the participants?" The contributors found that the major decisions they made were represented in our summary. They mentioned though that many smaller decisions or factors were missing. For exam- ple, C7 remarked that the fact that documentation teams had to always catch up with the development team was not represented well in the summary. We had analyzed most of these details, but for the sake of brevity, we did not in- clude them in the summary. There are only a few decisions that we did not analyze because we thought that they were less relevant to documentation (e.g., how to support users). These comments motivated our choice of presenting only a few important decisions and providing more detailed find- ings. Applicability or Usefulness. "Do the findings offer new insights? Can they be used to develop policy or change prac- tice?" To the best of our knowledge, this is the first study on the process taken by contributors to create and main- tain developer documentation. We hope that our description of the documentation decisions will help researchers devise documentation techniques that better support documenta- tion decisions. For example, recognizing that the program- ming language plays an important role in the documentation decisions could lead to the development of solutions for lan- guages that have a less standardized documentation culture.</p><p>We believe that this study has many benefits for prac- titioners. Contributor C11 mentioned that our summary could help other contributors reflect more on their docu- mentation approach. Contributors and users mentioned that there is a general lack of motivation when it comes to con- tributing documentation. We hope that by uncovering the context and the consequences of documentation decisions, such as how documenting can improve the quality of the code, and how certain types of document contribute to the success of projects, could increase the motivation of contrib- utors and users. Sensitivity. "Were the questions driving the data collection arrived at through analysis, or were concepts and questions generated before the data were collected?" We did not en- ter this study with a blank slate because we have worked on documentation studies and tools in the past. To address this issue, Creswell recommends disclosure of any stance on the issue that researchers had before beginning the study <ref type="bibr">[6, p.217]</ref>. For instance, we thought that writing documenta- tion took a large amount of time and effort and we did not think that the community could play such a significant role in the documentation process. We were surprised at first to see the contributors struggle to name a single challenge to documentation. We soon realized how documentation could be seen as a vital and interesting part of open source projects and how the community could help improve the documen- tation. These early observations forced us to recognize and reconsider our preconceptions and helped us look at the data from a fresher perspective.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">RELATED WORK</head><p>Most of the related work on developer documentation has focused on studying how developers use documentation and devising techniques to document programs.</p><p>How Developers Learn Frameworks and Libraries. Kirk et al. conducted three case studies to study the prob- lems encountered by software developers when using a frame- work <ref type="bibr" target="#b11">[12]</ref>. They identified general kinds of questions such as finding out what features are provided by the framework and understanding how classes communicate together in the presence of inversion of control and subtle dependencies. The authors observed that different types of documentation provided answers to a subset of the questions.</p><p>Carroll et al. observed users reading documentation and found that the step-by-step progress induced by traditional documentation such as detailed tutorials and reference man- uals was often interrupted by periods of self-initiated prob- lem solving by users <ref type="bibr" target="#b2">[3]</ref>. Indeed, users ignored steps and complete sections that did not seem related to real tasks, and they often made mistakes during their unsupervised ex- ploration. Because this active way of learning was not what the designer of traditional documentation intended, Carroll et al. designed a new type of documentation, the minimal manual, that is task-oriented and that helps the users resolve errors <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b14">15]</ref>.</p><p>Robillard conducted a survey and qualitative interviews in a study of how Microsoft developers learn APIs <ref type="bibr" target="#b13">[14]</ref>. The study identified obstacles to API learnability in documenta- tion such as the lack of code examples and the absence of task-oriented documentation. Forward and Lethbridge con- ducted a survey with developers and managers, and asked questions regarding the use and the characteristics or vari- ous software documents <ref type="bibr" target="#b10">[11]</ref>. According to the participants, the following properties of software documentation were the most important: content (information in the document), up- to-dateness, availability, use of examples, and organization (sections, subsections, index).</p><p>Nykaza et al. performed a need assessment on the desired and required content of the documentation of a framework developed by a software organization <ref type="bibr" target="#b12">[13]</ref>. The authors ob- served that junior programmers with deep knowledge of the domain and senior programmers with no knowledge of the domain had similar documentation needs about the frame- work. The programmers preferred simple code examples that they could copy and execute right away (as opposed to complex examples showing many features at once) and a manual that had self-contained sections so users could refer to it during their exploration (as opposed to manual that must be read from start to finish).</p><p>We complement these studies by studying the decisions made by the producers of documentation and by identifying the effort required by these decisions and their impact on the project and the users. Documenting Programs. Many documentation techniques rely on mining code examples to infer usage information about libraries and frameworks. For example, SpotWeb mines code examples found on the web to recommend frame- work hotspots, i.e., classes and methods that are frequently reused <ref type="bibr" target="#b16">[17]</ref>. MAPO mines open source repositories and in- dexes API usage patterns, i.e., sequence of method calls that are frequently invoked together <ref type="bibr" target="#b17">[18]</ref>. Then, MAPO recom- mends code snippets that implement these patterns, based on the programming context of the user.</p><p>Schäfer et al. used a clustering technique to recover the main building blocks of a framework from client programs to build a representation of the framework that is easy to un- derstand by users <ref type="bibr" target="#b15">[16]</ref>. Similar classes are grouped together to help users understand the framework.</p><p>Finally, there are tools that help developers produce or augment existing documentation. Mismar is a semi-automated tool that produces tutorial-like wizards from concerns, i.e., the classes and methods related to a framework extension point, and that finds code examples that implement the tu- torial <ref type="bibr" target="#b6">[7]</ref>. eMoose highlights in a code editor the methods that have special rules described in their Javadoc <ref type="bibr" target="#b9">[10]</ref>.</p><p>We believe that tools can be useful to complement the documentation, but they cannot replace human-written doc- umentation. As we observed in our study, some documents are used for marketing purposes so they cannot be gener- ated, and writing documentation introduces a feedback loop that is beneficial for the program's usability.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">CONCLUSION</head><p>Developers rely on documentation to learn how to use frameworks and libraries and to help them select the open source technologies that can fulfill their requirements. Fol- lowing a qualitative study with 22 documentation contribu- tors and users and the analysis of the evolution of 19 docu- ments, we observed the decisions made by open source con- tributors in the context of three production modes: initial effort, incremental changes, and bursts.</p><p>Understanding how these decisions are made and what their consequences are can help researchers devise documen- tation techniques that are more suited to the documenta- tion process of open source projects and that alleviate the issues we identified. Our findings can also help practition- ers make more informed decisions. For example, a better understanding of embarrassment-driven development could motivate developers to document their changes quickly after making them. A better comprehension of the relationship between the type of project (e.g., library or framework) and getting started and reference documentation could help con- tributors focus their effort on the more appropriate type of documentation.</p><p>As a future work, we would like to report our results on the other decisions made by open source contributors and pursue our analysis of the documentation needs of users.   <ref type="table">Table 4</ref>: Classification of document revisions (in %). Top-5 codes for each document are in italic. Addition. Text or examples that are added to a docu- ment. For example, when a new feature is released, a section describing the feature is often added in a reference manual.</p><p>Structure. When sections are moved inside or outside documents, e.g., when a large document is split in multiple smaller documents.</p><p>Format. Modifications of the file syntax, e.g., the addi- tion of an HTML closing tag that had been forgotten in the previous revision.</p><p>Links. Addition of a URL to the documentation. Correction. Modification of a code example because it was broken or the behavior was not the one intended. Be- cause it was not always possible to determine if a correction was due to refactoring, the modifications of a code example following a refactoring are included in this category.</p><p>Polish. Words or sentences that are copy edited, e.g., spelling error. When new sentences or domain-specific words were added to clarify an existing sentence, we considered the change to be part of the clarification category.</p><p>SPAM. Unsolicited advertisement or vandalism.</p><p>Revert. When the current version of the document is re- verted to a previous version. This is often caused by SPAM, but incorrect or unclear addition by contributors can also cause a revert. <ref type="table">Table 4</ref> shows the distribution of the change categories across the document revisions for each project. The five most popular categories in each project are in bold. The last column, Avg., presents an unweighted average of each category across the 10 projects: because we did not ana- lyze the same number of documents and revisions for each project, a weighted average would be heavily biased toward the documents with the most revisions. We found that the top five category in weighted and unweighted averages were the same.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Documentation production modes</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>Table 1 :</head><label>1</label><figDesc></figDesc><table>Documentation users 

1. The project offered some reuse facilities for program-
mers (e.g., frameworks, libraries, toolkits, extensible 
applications), 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>Table 2 : Evolution of documents</head><label>2</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="false"><head>Table 3 : Decisions and their consequences</head><label>3</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" validated="false"><head>Code Django WP Plasma Hib. Spring GTK Firefox DBI Shoes Eclipse Avg.</head><label>Django</label><figDesc></figDesc><table>Clarification 
18.2 
7.1 
13.1 
6.9 
14.1 
1.9 
9.5 16.6 
5.9 
1.1 
9.4 
Adaptation 
15.8 
8.7 
24.6 17.2 
8.8 
33.3 
7.3 32.4 
0 
18.5 
16.7 
Addition 
16.7 
19 
18.0 24.1 
20.9 
9.3 
7.9 27.6 
64.7 
5.4 
21.4 
Structure 
3.2 
6.3 
3.3 
15.5 
4.4 
1.9 
1.3 
2.07 
8.8 
6.5 
5.3 
Format 
11.4 
6.7 
3.3 
3.5 
6.6 
11.1 
3.2 
1.4 
5.9 
55.4 
10.8 
Links 
6.5 27.7 
6.6 
3.5 
1.9 
5.6 
14.2 
4.8 
0 
1.1 
7.2 
Correction 
7.6 
2.4 
11.5 15.5 
10.6 
13 
3.8 
3.5 
5.9 
0.0 
7.4 
Polish 
20.5 17.4 
13.1 13.8 
32.8 
18.5 
11.7 11.7 
5.9 
10.9 
15.6 
SPAM 
</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7" validated="false"><head>Table 5 :</head><label>5</label><figDesc></figDesc><table>Documentation tools and open dource 
projects mentioned in this paper 

</table></figure>

			<note place="foot" n="3"> References to project and documentation tools are presented in Table 5 in the Appendix</note>

			<note place="foot" n="4"> Specific evidence will be provided upon request. 5 Unless otherwise specified, we assume that the contributors have commit access to their project&apos;s repository.</note>

			<note place="foot" n="7"> This is only a rough estimate because core contributors sometimes create bug reports themselves and other times, they forget to include the source of the change request.</note>

			<note place="foot" n="8"> Identifiers are associated with quotes for traceability and to distinguish between participants. Identifiers of contributors and users begin with a &quot;C&quot; and &quot;U&quot; respectively.</note>

			<note place="foot" n="10"> Only for documentation teams that are responsible for documenting changes</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>The authors thank Harold Ossher, Tristan Ratchford, Annie Ying and the anonymous reviewers for their valuable com-ments on the paper. This project was supported by NSERC.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Appendix A. Results of Historical Analysis</head><p>We classified each documentation revision by associating a category summarizing the rationale behind the change. When there were multiple types of change, we identified the change that had caused the largest number of lines in the document to be modified. Ten categories of change emerged from our analysis:</p><p>Clarification. Addition of a note or the modification of words to clarify existing content.</p><p>Adaptation. Modification of the text to reflect the new state of the project. An adaptive change can range from the update of copyright date to the recommendation of a new feature over and old one. </p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A methodological leg to stand on: lessons learned using grounded theory to study software development</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Adolph</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Hall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kruchten</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Conf. of the Center for Advanced Studies on Collaborative Research</title>
		<meeting>Conf. of the Center for Advanced Studies on Collaborative Research</meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="166" to="178" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A reuse case perspective on documenting frameworks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Butler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Grogono</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Khendek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Asia Pacific Soft. Eng. Conf</title>
		<meeting>IEEE Asia Pacific Soft. Eng. Conf</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="94" to="101" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Mazur-Rimetz. The minimal manual</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Carroll</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">L</forename><surname>Smith-Kerker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">R</forename><surname>Ford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Human-Computer Interaction</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="123" to="153" />
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Framework Documentation: How to document object-oriented frameworks. An empirical study. PhD in Computer Sscience</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Chai</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
		<respStmt>
			<orgName>University of Illinois at Urbana-Champaign</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Basics of Qualitative Research: Techniques and Procedures for Developing Grounded Theory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Corbin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">C</forename><surname>Strauss</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
			<publisher>Sage Publications</publisher>
		</imprint>
	</monogr>
	<note>3rd edition</note>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Qualitative Inquiry and Research Design</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">W</forename><surname>Creswell</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
			<publisher>Sage Publications</publisher>
		</imprint>
	</monogr>
	<note>2nd edition</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Automatically locating framework extension examples</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Dagenais</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Ossher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SIGSOFT Intl Symposium on Foundations of Soft. Eng</title>
		<meeting>ACM SIGSOFT Intl Symposium on Foundations of Soft. Eng</meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="203" to="213" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Moving into a new software project landscape</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Dagenais</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Ossher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">K</forename><surname>Bellamy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">P</forename><surname>Robillard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P</forename><surname>De Vries</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc</title>
		<meeting>null</meeting>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="275" to="284" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">An empirical study of software developers&apos; management of dependencies and changes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">R B</forename><surname>Souza</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">F</forename><surname>Redmiles</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Intl Conf. on Soft. Eng</title>
		<meeting>Intl Conf. on Soft. Eng</meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="241" to="250" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Improving api documentation usability with knowledge pushing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Dekel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">D</forename><surname>Herbsleb</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE/ACM SIGSOFT Intl Conf. on Soft. Eng</title>
		<meeting>IEEE/ACM SIGSOFT Intl Conf. on Soft. Eng</meeting>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="320" to="330" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">The relevance of software documentation, tools and technologies: a survey</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Forward</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">C</forename><surname>Lethbridge</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM Symposium on Document Engineering</title>
		<meeting>ACM Symposium on Document Engineering</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="26" to="33" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Identifying and addressing problems in object-oriented framework reuse</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kirk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Roper</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wood</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Empirical Soft. Eng</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="243" to="274" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">What programmers really want: results of a needs assessment for sdk documentation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Nykaza</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Messinger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Boehme</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">L</forename><surname>Norman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mace</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gordon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Intl Conf. on Computer Documentation</title>
		<meeting>Intl Conf. on Computer Documentation</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="133" to="141" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">What makes apis hard to learn? answers from developers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">P</forename><surname>Robillard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="27" to="34" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Smalltalk scaffolding: a case study of minimalist instruction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">B</forename><surname>Rosson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Carrol</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">K</forename><surname>Bellamy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SIGCHI Conf. on Human Factors in Computing Systems</title>
		<meeting>ACM SIGCHI Conf. on Human Factors in Computing Systems</meeting>
		<imprint>
			<date type="published" when="1990" />
			<biblScope unit="page" from="423" to="430" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Clustering for generating framework top-level views</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Schäfer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Aracic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Merz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mezini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Ostermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Working Conf. on Reverse Eng</title>
		<meeting>Working Conf. on Reverse Eng</meeting>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="239" to="248" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">SpotWeb: Detecting framework hotspots and coldspots via mining open source code on the web</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Thummalapenta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Xie</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE/ACM Intl Conf. on Automated Soft. Eng</title>
		<meeting>IEEE/ACM Intl Conf. on Automated Soft. Eng</meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="327" to="336" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">MAPO: Mining and recommending API usage patterns</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Zhong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Pei</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Mei</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. European Conf. on Object-Oriented Programming</title>
		<meeting>European Conf. on Object-Oriented Programming</meeting>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="318" to="343" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>

