<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/daniellin/Desktop/tldrApp/tldrResearchPaper/grobid-grobid-parent-0.4.4/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.4.5-dummy" ident="GROBID" when="2017-11-10T14:08+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Example-Centric Programming: Integrating Web Search into the Development Environment</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joel</forename><surname>Brandt</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Stanford University</orgName>
								<orgName type="institution" key="instit2">HCI Group</orgName>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">Advanced Technology Labs Computer Science Department Adobe Systems Stanford</orgName>
								<address>
									<postCode>94305, 94103</postCode>
									<settlement>San Francisco</settlement>
									<region>CA, CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mira</forename><surname>Dontcheva</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Advanced Technology Labs Computer Science Department Adobe Systems Stanford</orgName>
								<address>
									<postCode>94305, 94103</postCode>
									<settlement>San Francisco</settlement>
									<region>CA, CA</region>
								</address>
							</affiliation>
						</author>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marcos</forename><surname>Weskamp</surname></persName>
							<email>{mirad, mweskamp}@adobe.com</email>
							<affiliation key="aff1">
								<orgName type="department">Advanced Technology Labs Computer Science Department Adobe Systems Stanford</orgName>
								<address>
									<postCode>94305, 94103</postCode>
									<settlement>San Francisco</settlement>
									<region>CA, CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Scott</forename><forename type="middle">R</forename><surname>Klemmer</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Stanford University</orgName>
								<orgName type="institution" key="instit2">HCI Group</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Example-Centric Programming: Integrating Web Search into the Development Environment</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<textClass>
				<keywords>Author Keywords Example-centric development ACM Classification Keywords H52 Information interfaces and presentation: User Interfaces-prototyping General Terms</keywords>
			</textClass>
			<abstract>
				<p>The ready availability of online source-code examples has fundamentally changed programming practices. However, current search tools are not designed to assist with programming tasks and are wholly separate from editing tools. This paper proposes that embedding a task-specific search engine in the development environment can significantly reduce the cost of finding information and thus enable programmers to write better code more easily. This paper describes the design, implementation, and evaluation of Blueprint , a Web search interface integrated into the Adobe Flex Builder development environment that helps users locate example code. Blueprint automatically augments queries with code context, presents a code-centric view of search results, embeds the search experience into the editor , and retains a link between copied code and its source. A comparative laboratory study found that Blueprint enables participants to write significantly better code and find example code significantly faster than with a standard Web browser. Analysis of three months of usage logs with 2,024 users suggests that task-specific search interfaces can significantly change how and when people search the Web.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>INTRODUCTION</head><p>Programmers routinely face the "build or borrow" question <ref type="bibr" target="#b6">[7]</ref>: implement a piece of functionality from scratch, or locate and adapt existing code? The increased prevalence of online source code-shared in code repositories, documentation, blogs and forums <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b5">6,</ref><ref type="bibr" target="#b8">9,</ref><ref type="bibr" target="#b22">23]</ref>-enables programmers to opportunistically build applications by iteratively searching for, modifying, and combining examples <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b14">15]</ref>.</p><p>Programmers use Web resources in diverse ways. For a simple reminder, a quick Web search and a glance at the search result summaries are often adequate. To learn a new technique, programmers will likely spend more time, per- form several searches, and aggregate and compare informa- tion across multiple sites <ref type="bibr" target="#b5">[6]</ref>. Currently, a programmer searching for example code uses a Web browser that is in- dependent of other tools in his tool chain, a search engine that has no notion of his current development context, and a code editor that assumes that all code is typed by hand. This paper investigates whether a task-specific search en- gine integrated into existing programming environments can significantly reduce the cost of searching for relevant information. Small performance improvements can cause categorical behavior changes that far exceed the benefits of decreased task completion time <ref type="bibr" target="#b12">[13]</ref>. We believe that re- ducing search cost through tool integration may increase and change how programmers find and use examples. These ideas are manifest in Blueprint, a Web search inter- face integrated into the Adobe Flex Builder development environment that helps users locate example code. Two insights drove Blueprint's design (see <ref type="figure" target="#fig_0">Figures 1 and 2)</ref>. First, embedding search into the development environment allows the search engine to leverage the users' context (e.g. programming languages and framework versions in use). This lowers the cost of constructing a good query, which improves result quality. Second, extracting code examples from Web pages and composing them in a consistent, code- centric search results view reduces the need to click through to Web pages to find example code. This allows users to evaluate results much more rapidly than with tradi- tional Web search interfaces, reducing the cost of selecting a good result. This paper reports on a comparative laboratory study with 20 participants. In the lab, participants in the Blueprint condi- tion found and adapted example code significantly faster than those in the traditional Web search condition. Blue- print participants also wrote significantly better code, per- haps because they could look at many more examples and choose a better starting point. We released Blueprint online and logged its use. After three months, we conducted open-ended interviews with four frequent users. Three themes emerged. First, the inter- viewees felt that the benefits of consistent, example-centric results outweigh the drawbacks of missing context. Second, they claimed that Blueprint is symbiotic with existing IDE features. Third, they reported using Blueprint primarily to clarify existing knowledge and remind themselves of for- gotten details. To understand whether these three themes applied broadly, we compared Blueprint's query logs to logs from a tradi- tional search interface. We tested three hypotheses: First, if additional context is not necessary, Blueprint queries should have a significantly lower click-through rate. Second, if users are using Blueprint in concert with other IDE features, they are likely querying with code and more Blueprint search terms should contain correctly formatted code. Third, if Blueprint is used for reminders, Blueprint users should re- peat queries more frequently across sessions. Evidence for all three of these hypotheses was found in the logs, indicat- ing that users are searching differently with Blueprint than with traditional tools. These findings suggest that task- specific search interfaces may cause a fundamental shift in how and when individuals search the Web. This research is inspired by prior work in two domains: tailoring Web search to specific tasks and domains, and providing support for example-centric development.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Task-Specific Search Interfaces</head><p>Prior work on tailoring search interfaces <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b28">29]</ref> has ex- plored decision-making tasks <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b21">22]</ref>, Web page revisi- tation tasks <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b26">27]</ref>, and, most relevant to our work, pro- gramming tasks <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b18">19,</ref><ref type="bibr" target="#b25">26]</ref>. Blueprint follows a template- based approach <ref type="bibr" target="#b9">[10]</ref> to display results from a diverse set of pages in a consistent manner enabling users to rapidly browse and evaluate search results. There are research <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b25">26]</ref> and commercial <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2]</ref> systems designed to improve search for programmers. While these search engines are domain-specific, they are designed to support a broad range of tasks. Blueprint, on the other hand, is task-specific: it is oriented specifically towards finding example code. This introduces a trade-off: Blue- print's interface is optimized for a specific task, but loses generality. These systems are also completely independent of the user's development environment. CodeTrail explores the benefits of integrating Web brows- ing tools and development environments by linking the Firefox browser and Eclipse IDE <ref type="bibr" target="#b11">[12]</ref>. Blueprint goes one step further by placing search directly inside the develop- ment environment. Again, this introduces a trade-off: Blue- print gives up the rich interactions available in a complete, stand-alone Web browser in favor of a more closely- coupled interaction for a specific task.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Example-Centric Development</head><p>Prior work has created tools to assist with example-centric development <ref type="bibr" target="#b16">[17]</ref>. This work has addressed the availability of example code problem by mining code repositories <ref type="bibr" target="#b24">[25,</ref><ref type="bibr" target="#b27">28]</ref> or synthesizing example code from API specifications <ref type="bibr" target="#b20">[21]</ref>. Blueprint is unique in that it uses regular Web pages (e.g. forums, blogs, and tutorials) as sources for example code. We believe using regular Web pages as sources for example code has two major benefits: First, it may provide better examples. Code written for a tutorial is likely to con- tain better comments and be more general purpose than code extracted from an open source repository. Second, because these pages also contain text, programmers can use natural language queries to find the code they are looking for. The remainder of this paper proceeds as follows. We first present a scenario that describes the use of Blueprint and presents its interface. We then describe the implementation of Blueprint. Next, we detail the evaluation of Blueprint through a comparative laboratory study and a 3-month de- ployment. We conclude by positioning Blueprint in a design space of tools that support example-centric development.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>SCENARIO: DEVELOPING WITH BLUEPRINT</head><p>Blueprint is designed to help programmers with directed search tasks and allow them easily remind themselves of forgotten details, and clarify existing knowledge. Let's fol- low Jenny as she creates a Web application for visualizing power consumption. First, Jenny needs to retrieve power-usage data from a Web service. Although Jenny has written similar code previously, she can't remember the exact code she needs. She does re- member that one of the main classes involved began with "URL". So, she types "URL" into her code and uses auto- complete to remember the "URLLoader" class. Although, she now knows the class name, Jenny still doesn't know how to use it ( <ref type="figure" target="#fig_1">Figure 2</ref>, step 1). With another hotkey Jenny brings up the Blueprint search interface, which automatically starts searching for URLLoader (step 2). Blueprint augments Jenny's query with the language and framework version she is using, and returns appropriate examples that show how to use a URLLoader. She scans through the first few examples and sees one that has all the pieces she needs (step 3). She selects the lines she wants to copy, presses Enter, and the code is pasted in her project. Blueprint augments the code with a machine-and human-readable comment that records the URL of the source and the date of copy (step 4). When Jenny opens this source file in the future, Blueprint will check this URL for changes to the source example (e.g., with a bug fix), and will notify her if an update is available. Jenny runs the code in Flex's debugger to inspect the XML data. Next, Jenny wants to explore different charting components to display power usage. She invokes Blueprint a second time and searches for "charting". Jenny docks the Blueprint result window as a panel in her development environment so she can browse the results in a large, persistent view. When source pages provide a running example, Blueprint presents this example next to the source code. Eventually Jenny picks a line chart, copies the example code from the Blueprint panel into her project, and modifies it to bind the chart to the XML data. Finally, Jenny wants to change the color of the lines on the chart. She's fairly confident that she knows how to do this, and types the necessary code by hand. To make sure she didn't miss any necessary steps, she presses a hotkey to initiate a Blueprint search from one of the lines of code she just wrote. Blueprint automatically uses the contents of the current line as the initial query. Because terms in this line of code are com- mon to many examples that customize charts, she quickly finds an example that matches what she is trying to do. She confirms her code is correct, and begins testing the applica- tion. After only a few minutes her prototype is complete.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IMPLEMENTATION</head><p>Blueprint comprises a client plug-in, which provides the user interface for searching and browsing results, and the Blueprint server, which executes searches for example code. <ref type="figure" target="#fig_2">Figure 3</ref> provides a visual system description.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Client-Side Plug-In</head><p>The Blueprint client is a plug-in for Adobe Flex Builder. Flex Builder, in turn, is a plug-in for the Eclipse Develop- ment Environment. The Blueprint client provides three main pieces of functionality. First, it provides a user inter- face for initiating queries and displaying results. Second, it sends contextual information (e.g. programming language and framework version) with each user query to the server. Third, it notifies the user when the Web origin of examples they adapted has updated (e.g., when a bug is fixed). All communication between the client and server occurs over HTTP using the JSON data format. Blueprint's query and search results interface is imple- mented using HTML and JavaScript that are rendered by SWT browser widgets. Search results are rendered sequen- tially in a list below the query box. Each search result in- cludes the source Web page title, a hyperlink to the source Web page, English description of the example, the code ex- ample, and, if available, a running example (in our case in Flash) showing the functionality of the code. All examples include syntax highlighting (produced by the Pygments li- brary), and users can navigate through examples using the Tab key and copy/paste selections by pressing enter. Users can rate examples and dock the Blueprint floating window as an Eclipse panel. Blueprint also allows users to follow hyperlinks to view search results in context, and maintains a browsing and search history. When users paste example code into a project, Blueprint inserts a Javadoc-like comment at the beginning. This comment tags the example code with its URL source, the insertion date and time, and a unique numerical identifier. This metadata is both human-and machine-readable. Blue- print searches for these example comments each time a file is opened. For each comment, it queries the Blueprint server to check if the original example has been modified since it was copied.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Blueprint Server</head><p>The Blueprint server executes queries for example code and returns examples to the client. To maximize speed, breadth, and ranking quality, the server leverages the Adobe Community Help search APIs, a Google Custom Search engine. This search engine indexes Adobe product- specific content from across the Web. When the Blueprint server receives a query, it first augments the query with the user's context (e.g. programming language and framework version), which is sent along with the query by the client. Then the server sends the new augmented query to the search engine, which returns a set of URLs. Since Blueprint users are interested in code examples and not Web pages, the server retrieves the Web pages returned by the search engine and processes them to extract source code examples.</p><p>Since processing each page requires on average 10 seconds (8 seconds to retrieve the page, 2 second to extract exam- ples), we preprocess pages and cache extracted examples. When the search engine returns URLs that are not in the Blueprint cache, the URLs are added to the cache by a background process. Code examples from those URLs are returned in future queries. Before deploying Blueprint, we pre-populated the cache with approximately 50,000 URLs obtained from search en- gine query logs. To keep the cache current, Blueprint crawls the URLs in the cache as a background process. Since pages containing examples are relatively static, the Blueprint prototype re-crawls them weekly. The current Blueprint cache includes 59,424 examples from 21,665 unique Web pages. Leveraging an existing commercial search engine to produce a candidate result set has a number of advantages over build- ing a new search engine (e.g. <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b25">26]</ref>). First, it is substan- tially more resource-efficient to implement, as keeping a document collection up to date is expensive. Second, gener- ating high-quality search results from natural-language que- ries is a hard problem and a highly-optimized commercial search engine is likely to produce better results than a proto- type search engine with a restricted domain. Finally, a gen- eral-purpose search engine surfaces examples from tutorials, blogs, and API pages. Examples found on such pages are more likely to be instructive than examples extracted from large source code repositories.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Extracting Example Code and Descriptions</head><p>To extract source code from Web pages, Blueprint segments the page and classifies each segment as source code or other type of content. First, Blueprint uses the BeautifulSoup li- brary <ref type="bibr" target="#b23">[24]</ref> to transform HTML into proper XHTML, and then it divides the resulting hierarchical XHTML document into independent segments by examining block-level elements. Blueprint uses 31 tags to define blocks; the most common are: P, H1, DIV, and PRE. It also extracts SCRIPT and OBJECT blocks as block-level elements, because running examples that show executing example code are usually contained within these tags. To find block-level elements, Blueprint performs a depth-first traversal of the document. When it reaches a leaf element, it backtracks to the nearest block- level ancestor and creates a segment. If the root of the tree is reached before finding a block-level element, the element immediately below the root is extracted as a segment. This algorithm keeps segments ordered exactly as they were in the original file. Finally, to more easily and reliably deter- mine whether a segment contains code, Blueprint renders each segment to plain text using w3m, a text-based Web browser. This rendering allows for classification of code based on its appearance to a user on a Web page and not based on its HTML structure. Blueprint stores the HTML and plain text versions of all segments in a database. On average, a Web page in our dataset contains 161 segments. However, 69% of these are less than 50 characters long (these are primarily created by navigational elements). Although this algorithm leads to a large number of non-source code segments, it correctly parses blocks of example code into single segments, which enables our classifiers to prune non-source code segments. One limitation of this extraction algorithm is that it as- sumes code examples on Web pages are independent and so it does not handle Web pages that provide several re- lated code examples that should be considered in concert, such as tutorials that list several steps or offer several com- plementary alternatives.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Classifying example code</head><p>Given a set of clean, separate segments, the most straight- forward approach to classifying them as source code is to use a programming language parser and label segments that parse correctly as code. For Blueprint, this would require ActionScript and MXML parsers, because they are the two languages used by Adobe Flex. In practice, this approach yields many false negatives: segments that contain code but are not labeled as such. For example, code with line num- bers or a typo will cause parsing to fail. An alternate approach is to specify heuristics based on fea- tures unique to code, such as curly braces, frequent use of language keywords, and lines that end with semi-colons <ref type="bibr" target="#b18">[19]</ref>. This approach produces many fewer false negatives, but introduces false positives, such as paragraphs of text that discuss code. Such paragraphs usually describe other source code found on the page and are not useful on their own. To remove buggy code that appears in forums and blog post comments, we ignore all segments that follow a com- ment block (where a comment block is a block that in- cludes the word "comment") and all Web pages that in- clude "group" or "forum" in the URL. We computed precision (MXML: 84%, AS: 91%) and recall (MXML: 90%, AS: 86%) on 40 randomly sampled Web pages from a corpus of the 2000 most frequently visited Web pages from the Adobe Community Help Search Web site. We compared the examples extracted by Blueprint to the examples manually extracted by two researchers. Precision was mainly affected by misclassifying source examples in other languages (e.g. HTML, Javascript, and Coldfusion) as MXML or Ac- tionScript. Recall differed among types of Web pages. API reference Web pages, which are often produced automatically, were much easier to parse than tutorial Web pages, which vary greatly in the types of examples they show.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Extracting text and running examples</head><p>In addition to extracting source code, Blueprint extracts Eng- lish descriptions and, where possible, running examples for each code segment. Informal inspection of pages containing example code found that the text immediately preceding an example almost always described the example, and running examples almost always occurred after the example code. To build descriptions, Blueprint iteratively joins the seg- ments immediately preceding the code until any of three conditions is met: 1.) we encounter another code segment, 2.) we encounter a segment indicative of a break in content (those generated by DIV, HR, or heading tags), or 3.) we reach a length threshold (currently 250 words). Using this strategy the English we extract is the correct example de- scription roughly 83% of the time as compared to the de- scriptions manually extracted by two researchers. To find running examples, Blueprint analyzes the k segments following a code example. Because we are concerned with Flex, all examples occur as Flash SWF files. We search for references to SWF files in OBJECT and SCRIPT tags. In prac- tice, we have found k=3 works best; larger values resulted in erroneous content, such as Flash-based advertisements.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Keeping track of changes to examples</head><p>Each time a page is crawled, Blueprint checks for updates to the examples (e.g., bug fixes). It performs an exhaustive, pairwise comparison of examples on the new and old pages using the diff tool. Pages typically contain fewer than ten examples. If an example on the new and old pages matches exactly, they are deemed the same. If a new example has more than two-thirds of its lines in common with an old example, it is recorded as changed. Otherwise, the new example is added to the repository. When an example is no longer available on the Web, we keep the cached versions but do not display it as part of search results. The database stores each example with a timestamp, and keeps all previ- ous versions. These timestamps allow Blueprint to notify users when an example changes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>EVALUATION: STUDYING BLUEPRINT IN THE LAB</head><p>We conducted a comparative laboratory study with 20 par- ticipants to better understand how Blueprint affects the ex- ample-centric development process. The laboratory study evaluated three hypotheses: H1: Programmers using Blueprint will complete directed tasks more quickly than those who do not because they will find example code faster and bring it into their project sooner. H2: Code produced by programmers using Blueprint will have the same or higher quality as code written by example modification using traditional means. H3: Programmers who use Blueprint produce better de- signs on an exploratory design task than those using a Web browser for code search.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Method</head><p>We recruited twenty professional programmers through an internal company mailing list and compensated them with a $15 gift card. The participants had an average of 11.3 years of professional experience. Fourteen reported at least one year of programming experience with Flex; twelve reported spending at least 25 hours a week programming in Flex. The participants were given an off-the-shelf installation of Flex Builder, pre-loaded with three project files. The par- ticipants in the control condition were provided with the Firefox Web browser; they were asked to use the Adobe Community Help Search engine to look for example code. Participants in the treatment condition were provided with Blueprint to search for code samples; they were not al- lowed to use a Web browser. Participants were asked to complete a tutorial, a directed task, and an exploratory task. Participants were told that they would be timed and that they should approach all tasks as though they are prototyping and not writing production- level code. Participants began each task with a project file that included a running application, and they were asked to add additional functionality. For the tutorial task, the sample application contained an HTML browsing component and three buttons that navi- gate the browser to three different Web sites. Participants received a written tutorial that guided them through adding fade effects to the buttons and adding a busy cursor. In the control condition, the participants were asked to use the Web browser to find sample code for both modifications. The tutorial described which search result would be best to follow and which lines of code to add to the sample appli- cation. In the treatment condition, the participants were asked to use Blueprint to find code samples. For the directed programming task, the participants were instructed to use the URLLoader class to retrieve text from a URL and place it in a text box. They were told that they should complete the task as quickly as possible. In addition, the participants were told that the person to complete the task fastest would receive an additional gift card as a prize. Participants were given 10 minutes to complete this task. For the exploratory programming task, participants were instructed to use Flex Charting Components to visualize an array of provided data. The participants were instructed to make the best possible visualization. They were told that the results would be judged by an external designer and the best visualization would win an extra gift card. Participants were given 15 minutes to complete this task. To conclude the study, we asked the participants a few questions about their experience with the browsing and searching interface.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Results</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Directed Task</head><p>Nine out of ten Blueprint participants and eight out of ten control participants completed the directed task. Because not all participants completed the task and completion time may not be normally distributed, we report all significance tests using rank-based non-parametric statistical methods (Wilcoxon-Mann-Whitney test for rank sum difference and Spearman rank correlation). We ranked the participants by the time until they pasted the first example. See <ref type="figure">Figure 4</ref>. Participants using Blueprint pasted code for the first time after an average of 57 sec- onds, versus 121 seconds for the control group. The rank- order difference in time to first paste was significant (p &lt; 0.01). Among finishers, those using Blueprint finished after an average of 346 seconds, compared to 479 seconds for the control. The rank-order difference for all participants in task completion time was not significant (p=0.14). Partici- pants' first paste time correlates strongly with task comple- tion time (r s =0.52, p=0.01). This suggests that lowering the time required to search for, selecting and copying examples will speed development. A professional software engineer external to the project rank-ordered the participants' code. He judged quality by whether the code met the specifications, whether it in- cluded error handling, whether it contained extraneous statements, and overall style. Participants using Blueprint produced significantly higher-rated code (p=0.02). We hy- pothesize this is because the example-centric result view in Blueprint makes it more likely that users will choose a good starting example. When searching for "URLLoader" using the Adobe Community Help search engine, the first result contains the best code. However, this result's snippet did not convey that the page was likely to contain sample code. For this reason, we speculate that some control par- ticipants overlooked it.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Exploratory Task</head><p>A professional designer rank-ordered the participants' charts. To judge chart quality, he considered the appropri- ateness of chart type, whether or not all data was visual- ized, and aesthetics of the chart. The sum of ranks was smaller for participants using Blueprint <ref type="bibr">(94 vs. 116)</ref>, but this result was not significant (p=0.21). While a larger study may have found significance with the current imple- mentation of Blueprint, we believe improvements to Blue- print's interface (described below) would make Blueprint much more useful in exploratory tasks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Areas for Improvement</head><p>When asked "How likely would you be to install and use Blueprint in its current form?" participants responses aver- aged 5.1 on a 7-point Likert scale (1 = "not at all likely", 7 = "extremely likely"). Participants also provided several suggestions for improvement. The most common requests were for greater control over result ranking. Two users suggested that they should be able to rate (and thus affect the ranking of) examples. Three users expressed interest in being able to filter results on certain properties such as whether result has a running ex- ample, the type of page that the result was taken from (blog, tutorial, API documentation, etc.), and the presence of comments in the example. Three participants requested greater integration between Blueprint and other sources of data. For example, one participant suggested that all class names appearing in examples be linked to their API page. Finally, three participants requested maintaining a search history; one also suggested a browseable and searchable history of examples used. We implemented the first two suggestions before the field deployment. The third remains future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Discussion</head><p>In addition to the participants' explicit suggestions, we identified a number of shortcomings as we observed par- ticipants working. It is currently difficult to compare multi- ple examples using Blueprint. Typically, only one example fits on the screen at a time. To show more examples simul- taneously, one could use code-collapsing techniques to re- duce each example's length. Additionally, Blueprint could show all running examples from a result set in parallel. Fi- nally, visual differencing tools might help users compare two examples. We assumed that users would only invoke Blueprint once per task. Thus, each time Blueprint is invoked, the search box and result area would be empty. Instead, we observed that users invoked Blueprint multiple times for a single task (e.g. when a task required several blocks of code to be cop- ied to disparate locations). Results should be persistent, but it should be easier to clear the search box: when re- invoking Blueprint, the terms should be pre-selected so that typing replaces them.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>LONGITUDINAL STUDY: DEPLOYMENT TO 2,024 USERS</head><p>To better understand how Blueprint would affect the workflow of real-world programmers, we conducted a three-month deployment on the Adobe Labs Web site. Over the course of the deployment, we performed bug fixes and minor design improvements (often based on feedback through the Web forum); the main interaction model re- mained constant throughout the study. At the completion of the study, we conducted 30-minute interviews with four active Blueprint users to understand how they integrated Blueprint in their workflows. Based on the interviews, we formed three hypotheses, which we tested with the Blueprint usage logs. After evaluating these hypotheses, we performed further exploratory analysis of the logs. This additional analysis provided high-level in- sight about current use that we believe will help guide fu- ture work in creating task-specific search interfaces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Insights from Interviewing Active Users</head><p>Our interviews with active users uncovered three broad insights about the Blueprint interface. To understand if these insights generalize, we distilled each insight into a testable hypothesis. The insights and hypotheses are pre- sented here; the results of testing them are presented in the following section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>The benefits of consistent, example-centric results outweigh the drawbacks of missing context.</head><p>A consistent view of results makes scanning the result set more efficient. However, in general, removing content from its context may make understanding the content more diffi- cult. None of our interviewees found lack of context to be a problem when using Blueprint. One interviewee walked us through his strategy for finding the right result: "Highlight- ing [of the search term in the code] is the key. I scroll through the results quickly, looking for my search term. When I find code that has it, I can understand the code much faster than I could English." We hypothesize that examining code to determine if a result is relevant has a smaller gulf of evaluation <ref type="bibr" target="#b19">[20]</ref> than examining English. Presenting results in a consistent manner makes this process efficient. When users desire additional context for a Blueprint result, they can click through to the original source Web page. This Web page opens in the same window where Blueprint results are displayed. If additional context is rarely neces- sary, we expect a low click-through rate. H1: Blueprint will have a significantly lower click-through rate than seen in a standard search engine.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Blueprint is symbiotic with existing IDE features; they each make the other more useful.</head><p>Three interviewees reported using Blueprint as an "exten- sion" to auto-complete. They use auto-complete as an index into a particular object's functionality, and then use Blue- print to quickly understand how that functionality works. This suggests that embedding search into the development environment creates a symbiotic relationship with other features. Here, auto-complete becomes more useful be- cause further explanation of the auto-complete results is one keystroke away. We believe that this symbiotic rela- tionship is another example of how integrating task-specific search into a user's existing tools can lower search costs. Programmers routinely search with code terms when using standard search engines <ref type="bibr" target="#b5">[6]</ref>. However, when these search terms are typed by hand, they frequently contain formatting inconsistencies (e.g. method names used as search terms are typed in all lowercase instead of camelCase). By con- trast, when search terms come directly from a user's code (e.g. generated by output from auto-complete), the search terms will be correctly formatted. If Blueprint is being used in a symbiotic manner with other code editing tools, we expect to see a large number of correctly formatted queries. H2: Blueprint search terms will contain correctly formatted code more often than search terms used with a standard search engine.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Blueprint is used heavily for clarifying existing knowledge and reminding of forgotten details.</head><p>One interviewee stated that, using Blueprint, he could find what he needed "60 to 80 percent of the time without hav- ing to go to API docs." He felt that Blueprint fell in the "mid-space between needing to jump down into API docs when you don't know what you're doing at all and not needing help because you know exactly what you are do- ing." Other interviewees echoed this sentiment. In general, they felt that Blueprint was most useful when they had some knowledge about how to complete the task at hand, but needed a piece of clarifying information.</p><p>In general, understanding a user's search goal from query logs alone is not feasible-there is simply not enough con- textual information available <ref type="bibr" target="#b13">[14]</ref>. However, if uses of Blueprint tend more toward reminding and clarifying exist- ing knowledge than learning new skills, we expect that us- ers will more commonly repeat queries they have per- formed in the past. H3: Users of Blueprint are more likely to repeat queries across sessions than users of a standard search engine.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Methodology</head><p>To evaluate these hypotheses, one needs a comparison point. Adobe's Community Help search engine presents a standard Web search interface that is used by thousands of Flex programmers. Furthermore, Community Help uses the same Google Custom Search Engine that is part of Blue- print. In short, Blueprint and Community Help differ in their interaction model, but are similar in search algorithm, result domain, and user base. We randomly selected 5% of users who used the Community Help search engine over the same period as the Blueprint deployment. We analyzed all logs for these users. In both datasets, queries for individual users were grouped into ses- sions. A session was defined as a sequence of events from the same user with no gaps longer than six minutes. (This grouping technique is common in query log analysis, e.g. <ref type="bibr" target="#b5">[6]</ref>.) Common "accidental" searches were removed (e.g., empty or single-character searches, and identical searches occurring in rapid succession) in both datasets. We used the z-test for determining statistical significance of differences in means and the chi-square test for deter- mining differences in rates. Unless otherwise noted, all dif- ferences are statistically significant at p &lt; 0.01.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Results</head><p>Blueprint was used by 2024 individuals during the 82 day deployment, with an average of 25 new installations per day. Users made a total of 17012 queries, or an average of 8.4 queries per user. The 100 most active users made 1888 of these queries, or 18.8 queries per user. The Community Help query logs used for comparison comprised 13283 users performing 26036 queries, an aver- age of 2.0 queries per user. H1: Blueprint will have a significantly lower click-through rate than seen in a standard search engine Blueprint users clicked through to source pages signifi- cantly less than Community Help users (µ = 0.38 versus 1.32). To be conservative: the mean of 0.38 for Blueprint is an over-estimate. For technical reasons owing to the many permutations of platform, browser, and IDE versions, click- throughs were not logged for some users. For this reason, this analysis discarded all users with zero click-throughs. H2: Blueprint search terms will contain correctly formatted code more often than search terms used with a standard search engine. To test this hypothesis, we used the occurrence of camel- Case words as a proxy for code terms. The Flex frame- work's coding conventions use camelCase words for both class and method names, and camelCase rarely occurs in English words. Significantly more Blueprint searches contained camelCase than Community Help: 49.6% (8438 of 17012) versus 16.2% (4218 of 26036). The large number of camelCase words in Blueprint searches indicates that many searches are being generated directly from users' code. This sug- gests that, as hypothesized, Blueprint is being used in a symbiotic way with other IDE features. The large number of camelCase queries in Blueprint searches also indicates that the majority of searches use precise code terms. This suggests that Blueprint is being used heavily for clarifica- tion and reminding, where the user has the knowledge nec- essary to select precise search terms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>H3: Users of Blueprint are more likely to repeat queries across sessions than users of a standard search engine.</head><p>Significantly more Blueprint search sessions contained queries that had been issued by the same user in an earlier session than for Community Help: 12.2% (962 of 7888 ses- sions) versus 7.8% (1601 of 20522 sessions).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Exploratory Analysis</head><p>To better understand how Blueprint was used, we per- formed additional exploratory analysis of the usage logs. We present our most interesting findings below.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Using Blueprint as a resource to write code by hand is common.</head><p>A large percentage of sessions (76% ) did not contain a copy-and-paste event. There are two possible reasons for this high number: First, as our interviewees reported, we believe Blueprint is commonly used to confirm that the user is on the right path -if they are, they have nothing to copy. Second, sometimes Blueprint's results aren't useful. (For technical reasons, copy-and-paste events were not logged on some platforms. The statistic presented here is only calculated amongst users were we could log this event. In this data set, there were 858 sessions that contained copy-and-paste events out of a total of 3572 sessions.)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>People search for similar things using Blueprint and Commu- nity Help, but the frequencies are different.</head><p>We examined the most common queries for Blueprint and Community Help and found that there was a large amount of overlap between the two sets: 10 common terms ap- peared in the top 20 queries of both sets. The relative fre- quencies, however, differed between sets. As one example, the query "Alert" was significantly more frequent in Blue- print than Community Help. It was 2.2 times more fre- quent, ranking 8 th versus 34 th .</p><p>The initial result views for search "Alert" for both Blue- print and Community Help are shown in <ref type="figure" target="#fig_3">Figure 5</ref>. In the case of this particular search, we believe the difference in frequency is explained by the granularity of the task the user is completing. Namely, this task is small. When a user searches for "Alert," he is likely seeking the one line of code necessary to display a pop-up alert window. In Blue- print, the desired line is immediately visible and high- lighted; in Community Help, the user must click on the first result and scroll part way down the resulting page to find the code. Alerts are often used for debugging, where there are reasonable-but less optimal-alternative approaches (e.g. "trace" statements). It may be the case that Blueprint's lowered search cost changes user behavior. Users who do not have Blueprint more frequently settle for sub-optimal approaches because of the relatively higher cost of taking the optimal approach.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Both interface modalities are important</head><p>Users can interact with blueprint either as a pop-up window or inside a docked panel. Among all users, 59% of sessions used only the pop-up interface, 9% used only the docked in- terface, and 32% used both. This suggests that providing both interfaces is important. Furthermore the fact that users fre- quently switched between interfaces mid-session suggests that some tasks are more appropriate for a particular interface.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>User Retention</head><p>Are early adopters of Blueprint still using it, or is Blueprint simply an interesting curiosity that users pick up, try a few times, and set aside? At the time of publication, Blueprint had been publicly available for 200 days, and its user base had grown to 3253, with an average of 16.3 new users per day. During this time, the most active third of users (1084) searched with Blueprint over at least a 10-day span. The top 10% of users (325) queried Blueprint over at least a 59- day span, and the top 1% of users (33) used queried Blue- print over at least a 151-day span.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DESIGN SPACE</head><p>Blueprint represents one point in the design space of tools for programmers (see <ref type="figure" target="#fig_4">Figure 6</ref>). We discuss Blueprint's limitations in the context of this design space and suggest directions for future work. Task: At a high level, programming comprises: planning and design; implementation; and testing and debugging. Blueprint helps programmers find code that implements desired functionality. Other tasks could (and do) benefit from Web search <ref type="bibr" target="#b25">[26]</ref>, but are not easily completed with Blueprint's interface. For example, to decipher a cryptic error message, one may want to use program output as the search query <ref type="bibr" target="#b15">[16]</ref>. Expertise: Programmers vary in expertise with the tools they use (e.g. languages and libraries), and their tasks (e.g. implementing a piece of functionality). Because Blueprint presents code-centric results, programmers must have the expertise required to evaluate whether a result is appropriate. Time scale: We designed Blueprint to make small tasks faster by directly integrating search into the code editor. This removes the activation barrier of invoking a separate tool. While Blueprint can be docked to be persistent, for longer information tasks, the advantages of a richer browser will dominate the time savings of direct integration. Approach: Programmer Web use can include very directed search tasks as well as exploratory browsing tasks. Given its emphasis on search, the Blueprint prototype is best suited to directed tasks: a well-specified query can effi- ciently retrieve a desired result. It is possible to use Blue- print for exploratory tasks, such as browsing different types of charts, however support for such tasks can be improved by incorporating traditional Web browser features such as tabbed browsing and search results sorting and filtering. Integration Required: Some examples can be directly copied. Others require significant modification to fit the current context. Because Blueprint inserts example code directly into the user's project, it provides the most benefit when example code requires little modification. When a piece of code is part of a larger project, the programmer may need to read more of the context surrounding the code in order to understand how to adapt it.   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>CONCLUSION</head><p>To support programming by example modification, this paper introduced a user interface for accessing online ex- ample code from within the development environment. It discussed the Blueprint client interface, which displays search results in an example-centric manner. The Blueprint server introduced a lightweight architecture for using a general-purpose search engine to create code-specific search results that include written descriptions and running examples. In evaluating Blueprint, we found that it enabled users to search for and select example code significantly faster than with traditional Web search tools. Log analysis from a large-scale deployment with 2,024 users suggested that task-specific search interfaces may cause a fundamen- tal shift in how and when individuals search the Web.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 .</head><label>1</label><figDesc>Figure 1. The Blueprint plug-in for the Adobe Flex Builder development environment helps programmers locate example code. A hotkey places a search box (A) at the programmerʼs cursor position. Search results (B) are example-centric; each result contains a brief textual description (C), the example code (D), and, when possible, a running example (E). The userʼs search terms are highlighted (F), facilitating rapid scanning of the result set. Blueprint allows users to rate examples (G).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 .</head><label>2</label><figDesc>Figure 2. Example-centric programming with Blueprint. The user presses a hotkey to initiate a search; a search box appears at the cursor location (1). Searches are performed interactively as the user types; example code and running examples (when present) are shown immediately (2). The user browses examples with the keyboard or mouse, and presses Enter to paste an example into her project (3). Blueprint automatically adds a comment containing metadata that links the example to its source (4).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 .</head><label>3</label><figDesc>Figure 3. Architecture of the Blueprint system. The process of servicing a userʼs query is shown on the left; the background task of parsing Web pages to extract examples is shown on the right.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 .</head><label>5</label><figDesc>Figure 5. Comparison of Blueprint (left) and Commmunity Help (right) search result interfaces for the query "Alert". The desired information is immediately available in Blueprint; Community Help users must click the first result and scroll part way down the page to find the same information.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 6 .</head><label>6</label><figDesc>Figure 6. Design space of tools to aid programmersʼ Web use. Blueprint is designed to address the portion of the space shown with a shaded background.</figDesc></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Google Code</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Search</surname></persName>
		</author>
		<ptr target="http://code.google.com" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Krugle</surname></persName>
		</author>
		<ptr target="http://www.krugle.com" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Zoetrope: Interacting with the Ephemeral Web</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Adar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Dontcheva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Fogarty</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">S</forename><surname>Weld</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of UIST: ACM Symposium on User Interface Software and Technology</title>
		<meeting>UIST: ACM Symposium on User Interface Software and Technology</meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="239" to="287" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Sourcerer: A Search Engine for Open Source Code Supporting Structure-Based Search</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bajracharya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ngo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Companion to OOPSLA: ACM SIGPLAN Symposium on Object-Oriented Programming Systems, Languages, and Applications</title>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="681" to="82" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Opportunistic Programming: Writing Code to Prototype, Ideate, and Discover</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Brandt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lewenstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Dontcheva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">R</forename><surname>Klemmer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="18" to="24" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Two Studies of Opportunistic Programming: Interleaving Web Foraging, Learning, and Writing Code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Brandt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lewenstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Dontcheva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">R</forename><surname>Klemmer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CHI: ACM Conference on Human Factors in Computing Systems</title>
		<meeting>CHI: ACM Conference on Human Factors in Computing Systems</meeting>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="1589" to="98" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">The Mythical Man-Month: Essays on Software Engineering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">P</forename><surname>Brooks</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995" />
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">What is an End-User Software Engineer?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Clarke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EndUser Software Engineering Dagstuhl Seminar</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Dehaan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Flex Examples</surname></persName>
		</author>
		<ptr target="http://blog.flexexamples.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Relations, Cards, and Search Templates: User-Guided Web Data Integration and Layout</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Dontcheva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">M</forename><surname>Drucker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Salesin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">F</forename><surname>Cohen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of UIST: ACM Symposium on User Interface Software and Technology</title>
		<meeting>UIST: ACM Symposium on User Interface Software and Technology</meeting>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="61" to="70" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Summarizing Personal Web Browsing Sessions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Dontcheva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">M</forename><surname>Drucker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Wade</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Salesin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">F</forename><surname>Cohen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of UIST: ACM Symposium on User Interface Software and Technology</title>
		<meeting>UIST: ACM Symposium on User Interface Software and Technology</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="115" to="139" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Codetrail: Connecting Source Code and Web Resources</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Goldman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">C</forename><surname>Miller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of VL/HCC: IEEE Symposium on Visual Languages and Human-Centric Computing</title>
		<meeting>VL/HCC: IEEE Symposium on Visual Languages and Human-Centric Computing</meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="65" to="72" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Milliseconds Matter: An Introduction to Microstrategies and to Their Use in Describing and Predicting Interactive Behavior</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">D</forename><surname>Gray</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Boehm-Davis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Experimental Psychology: Applied</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="322" to="357" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Query Logs Alone are Not Enough</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Grimes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">M</forename><surname>Russell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshop on Query Log Analysis at WWW 2007: International World Wide Web Conference</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Hacking, Mashing, Gluing: Understanding Opportunistic Design</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Hartmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Doorley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">R</forename><surname>Klemmer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Pervasive Computing</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="46" to="54" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">What Would Other Programmers Do? Suggesting Solutions to Error Messages</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Hartmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Macdougall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Brandt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">R</forename><surname>Klemmer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CHI: ACM Conference on Human Factors in Computing Systems</title>
		<meeting>CHI: ACM Conference on Human Factors in Computing Systems</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Programming by a Sample: Rapidly Creating Web Applications with d.mix</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Hartmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Collins</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">R</forename><surname>Klemmer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of UIST: ACM Symposium on User Interface Software and Technology</title>
		<meeting>UIST: ACM Symposium on User Interface Software and Technology</meeting>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="241" to="50" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Search User Interfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">A</forename><surname>Hearst</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
			<publisher>Cambridge University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Assieme: Finding and Leveraging Implicit References in a Web Search Interface for Programmers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Hoffmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Fogarty</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">S</forename><surname>Weld</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of UIST: ACM Symposium on User Interface Software and Technology</title>
		<meeting>UIST: ACM Symposium on User Interface Software and Technology</meeting>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="13" to="22" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">L</forename><surname>Hutchins</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">D</forename><surname>Hollan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Norman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Direct Manipulation Interfaces. Human-Computer Interaction</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="311" to="349" />
			<date type="published" when="1985" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Jungloid Mining: Helping to Navigate the API Jungle</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Mandelin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bodík</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kimelman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of PLDI: ACM SIGPLAN Conference on Programming Language Design and Implementation</title>
		<meeting>PLDI: ACM SIGPLAN Conference on Programming Language Design and Implementation</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="48" to="61" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Exploring Websites through Contextual Facets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Medynskiy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Dontcheva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">M</forename><surname>Drucker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CHI: ACM Conference on Human Factors in Computing Systems</title>
		<meeting>CHI: ACM Conference on Human Factors in Computing Systems</meeting>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="2013" to="2035" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Information Foraging Theory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">L T</forename><surname>Pirolli</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
			<publisher>Oxford University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Richardson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Soup</surname></persName>
		</author>
		<ptr target="http://www.crummy.com/software/BeautifulSoup" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">XSnippet: Mining for Sample Code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Sahavechaphan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Claypool</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of OOPSLA: ACM SIGPLAN Symposium on Object-Oriented Programming Systems, Languages, and Applications</title>
		<meeting>OOPSLA: ACM SIGPLAN Symposium on Object-Oriented Programming Systems, Languages, and Applications</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="413" to="443" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Mica: A Web-Search Tool for Finding API Components and Examples</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Stylos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">A</forename><surname>Myers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of VL/HCC: IEEE Symposium on Visual Languages and Human-Centric Computing</title>
		<meeting>VL/HCC: IEEE Symposium on Visual Languages and Human-Centric Computing</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="195" to="202" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Visual Snippets: Summarizing Web Pages for Search and Revisitation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Teevan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Cutrell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CHI: ACM Conference on Human Factors in Computing Systems</title>
		<meeting>CHI: ACM Conference on Human Factors in Computing Systems</meeting>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="2023" to="2055" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">PARSEweb: A Programmer Assistant for Reusing Open Source Code on the Web</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Thummalapenta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Xie</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ASE: IEEE/ACM International Conference on Automated Software Engineering</title>
		<meeting>ASE: IEEE/ACM International Conference on Automated Software Engineering</meeting>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="204" to="217" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Using Thumbnails to Search the Web</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Woodruff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Faulring</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Rosenholtz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Morrsion</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Pirolli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CHI: ACM Conference on Human Factors in Computing Systems</title>
		<meeting>CHI: ACM Conference on Human Factors in Computing Systems</meeting>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="198" to="205" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>

