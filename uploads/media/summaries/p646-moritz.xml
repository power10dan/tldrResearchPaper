<?xml version="1.0" encoding="UTF-8" ?><root><I._INTRODUCTION type="str">These approaches focus on extracting snippets of source code that use methods provided by an API and can successfully suggest patterns of usages of these methods. One example of a coordination barrier is when a programmer does not know how to cast the type used as output in one API to the input of another API. Once the programmer selects the API methods he or she wishes to use, present the programmer with usage examples related to the task. In addition to its primary applications, this tool can be used as a research setting to study the effectiveness of the approach and discover how developers search for APIs. Our contribution with Export and the underlying model is three-fold: (i) we used RTM to identify similarities between API methods and provide programmers with a list of relevant methods; (ii) ExPort presents relevant API methods and API usage patterns visually in such a way that the developers can explore the relationships between API methods; and (iii) Export allows users to provide relevance (active) feedback, and passively logs user actions in order to understand users behavior when searching and browsing API usage examples. </I._INTRODUCTION><II._THE_PROBLEM type="str">In  the func- tion sendData calls two API methods: socketCreate and socketSend; in  the high-level functionality implemented in the function sendData is based on the other two functions (which may be in different files or classes) that individually calls the API methods socketCreate and socketSend. Current approaches extract sets of APIs used in relevant code examples (i.e., files, functions or code snippets) to mine frequent combinations of APIs (usage patterns). For example, if the sendData functions in Figures 1 and II are considered as relevant, after extracting the API calls in both methods, no API usage patterns are identified because API methods socketCreate and socketSend are not called by sendData in the second scenario ( . For example, in , the two API calls are highly related because they appear in the same function. Therefore, our technique also provides these examples to programmers. </II._THE_PROBLEM><III._OUR_APPROACH type="str">The former occurs when programmers are looking for specific information, while the latter is used to explore the space and understand high-level concepts . Moreover, browsing is most effective when programmers follow relationships between elements in the software space  (e.g., classes or functions in a call graph). But, when the elements are atomic units (i.e., functions or fields), the browsing process provides useful information for understanding high level concepts , . Therefore, we considered browsing as the main feature in ExPort to help programmers when they are looking for examples implementing high-level functionality. It is done by computing similarities between API methods and representing the software space of relevant methods as a call graph that can be visually explored. </III._OUR_APPROACH><key name="A. Relational Topic Modeling (RTM)" type="str">RTM identifies latent topics associated with documents and allows for the prediction of links between documents in large corpora based on document attributes and known relationships between the documents . Applications of RTM include analysis of networked data such as social networks of friends, collection of scientific papers with citations, as well as web pages and their links. In ExPort we use the same motivation in  but we consider functions as documents, and the document attributes are the API calls in the functions. Therefore, if the model identifies a link between two functions with a high probability, we consider these functions to be similar. For example, given an initial method socketSend ( , and a link identified by the model between functions connect and transmit (because both functions are called by sendData), the methods called by connect and transmit with high probability of being associated to the same topics of socketSend are retrieved as methods relevant to socketSend . </key><B._Detecting_and_Visualizing_API_Usage type="str">1) Similarity View: As a user enters a query, the autocom- pletion feature of the tool presents APIs that are textually related to the query as the user types. This displays the chain of calls in which an API is used, showing the programmer other functions that use the API. From the example given in the similarity view, the user has decided to investigate how fireActionEvent is used. The call-graph for this method is shown in . From the method calls, the user can tell that the function contentsChanged gets called when a JComboBox re- ceives an event. </B._Detecting_and_Visualizing_API_Usage><C._Implementation_Details type="str">1) Platform: In order to be portable and reach a large audience running on different systems, the tool is implemented as a web-based interactive GUI. 2) Languages: Given the web-based platform, the choice of client-side language is clear: the GUI is rendered in HTML and JavaScript, communicating with the server through the standard HTTP requests (Get, Post, Cookie, Request) and Asynchronous JavaScript And XML (AJAX). 3) Libraries: The prototype uses a graphing library to render the graphs in the GUI in JavaScript. 4) Database: The prototype uses a pre-computed database of similarities and calls for its back end. The full path to the webservice implementation can be found here. </C._Implementation_Details><IV._EXAMPLES_OF_DETECTING_AND_VISUALIZING_API type="str">SECTION TOO SHORT TO SUMMARIZE!</IV._EXAMPLES_OF_DETECTING_AND_VISUALIZING_API><Function_Description type="str">SECTION TOO SHORT TO SUMMARIZE!</Function_Description><key name="caller(apiId)" type="str">SECTION TOO SHORT TO SUMMARIZE!</key><key name="apicalls(apiId)" type="str">Suppose a user wishes to investigate how menu key bindings are used in the GNU electric VSLI system, with the goal of discovering how to add his or her own key bindings to a menu item. Each of them de- scribes additional functionality that can be used with key bindings. removeKeyBinding shows the user how a key binding can be removed from a menu item. restoreSavedBindings shows the user how it is possible to restore a set of key bindings that were saved previously. All of these examples address the user&apos;s original goal of discovering how to use key bindings in the MenuBar. </key><V._RELATED_WORK type="str">MAPO ,  is an Eclipse plugin for Mining API us- ages from Open source repositories that gathers code snippets from common online code search tools, such as Google Code Search  and Koders  (now merged with Ohloh Code). While this is similar to ExPort, it is dependent on the quality of the online search engine results. In addition, it does not present the results in a visualization of concrete usage examples. Portfolio ,  is a web-based code search engine that takes in a textual query as input and generates a list of suggestions based on a spreading activation network and PageRank. Sourcerer recommends   presents a comparison of other code search tools and ExPort. </V._RELATED_WORK><VI._CONCLUSION_AND_FUTURE_WORK type="str">SECTION TOO SHORT TO SUMMARIZE!</VI._CONCLUSION_AND_FUTURE_WORK></root>