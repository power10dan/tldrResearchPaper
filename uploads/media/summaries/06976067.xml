<?xml version="1.0" encoding="utf-8"?>
<root>
 <I._INTRODUCTION type="str">
  boohoo
 </I._INTRODUCTION>
 <key name="developers in a software project? Who are the best bug fixers? Who knows best who the right person is to fix a bug? Can the contributions of X and Y be compared? Are contributors promoted on merit? Where does X stand in the contributor hierarchy, and what is the number and nature of X's contributions?" type="str">
  Specifically, given the evolution history of a project, our goal is to determine and assess the contributions, as well as the expertise, of each developer in the project. All these factors hinder the reconstruction of a complete picture of the nature and specifics of a developer's contributions, which is essential for determining role and expertise. We discuss previous work in more detail in Section VII. However, upon closer examination, with more refined role definitions, we find that D 1 serves the role of triager (an individual who assigns a new bug to a developer) while D 2 serves the role of patch tester (an individual who reviews and tests patches submitted for fixing a bug). Our key novelty is defining roles that capture fundamental software development functions and then building a framework to assess contributions along these roles.
 </key>
 <II._DATA_COLLECTION_AND_PROCESSING_A._Data_Collection type="str">
  SECTION TOO SHORT TO SUMMARIZE!
 </II._DATA_COLLECTION_AND_PROCESSING_A._Data_Collection>
 <B._Expertise_Profiles_and_Metrics type="str">
  SECTION TOO SHORT TO SUMMARIZE!
 </B._Expertise_Profiles_and_Metrics>
 <key name="RDC &lt; 5% 5% â‰¤ RDC &lt; Highest Highest Minor contributor" type="str">
  SECTION TOO SHORT TO SUMMARIZE!
 </key>
 <C._Feature_Selection type="str">
  SECTION TOO SHORT TO SUMMARIZE!
 </C._Feature_Selection>
 <D._Contributor_Distribution type="str">
  In each graph, the x-axis shows seniority, in years, and the y-axis shows the number of contributors that have that seniority. Firefox. What is the contribution distribution in large projects? These numbers demonstrate that Firefox and Eclipse are large projects with a wide range of contribution in terms of major- minor contribution and authorship. In this section, we have defined a range of expertise metrics and showed that they are not correlated.
 </D._Contributor_Distribution>
 <III._CONTRIBUTOR_ROLES type="str">
  In software projects, an individual's contributions involve more than adding code or fixing bugs. In our case, by triaging we refer to contributors who inspect the bug report and identify potential bug fixers (i.e., other contributors who could fix the bug). In our study we label contributors as bug analysts if they perform one of the following decision-making tasks: (1) prioritizing bugs, (2) deciding when to assign "won't fix" status to bugs, (3) labeling a feature enhancement for future release, (4) identifying duplicate and invalid bugs, and (5) confirming a new bug as a valid bug by reproducing the errors as per the description in the bug report. In  we show the absolute number of con- tributors (y-axis) who have served one or more roles (x-axis); as expected, the bulk of contributors have only served one role, with much smaller numbers serving all 4 bug-based roles or all 3 source-based roles. For example, a bug-based role profile (D) = 2, 0, 3, 5 implies that contributor D has served the role of triager twice, never served the role of bug analyst, served the role of assist 3 times and the role of patch tester 5 times.
 </III._CONTRIBUTOR_ROLES>
 <key name="IV. HCM: OUR GRAPH-BASED MODEL" type="str">
  We want to identify structure in our two types of collaboration graphs. Some observations emerge from examining the model: (a) there exists a clique of non-trivial size (12-27 or 0.26%-9.44% of the nodes), (b) there are relatively few tiers, between 3 and 4 in our graphs, even though the graphs have more than 10,000 nodes, (c) there is a non- trivial number of one-degree nodes (12%, 24%, and 10%, for the graphs, except a really small one for Eclipse source-code), and (d) many one-degree nodes connect to the tier 1 nodes. We argue that the tier of a contributor is a good estimate of his expertise and contributions: a member of the clique is likely a senior contributor, who has fixed high-severity bugs, many bug types, and owns many files; conversely, we expect a contributor from tiers 3-4 to be a junior contributor with low expertise. For example, in Firefox, 68.79% of tier 2 nodes connect to 74.07% of the clique (tier 1) nodes. We found that, out of 28 super-reviewers, 21 are in the source-code based clique and 24 are in the bug-based clique.
 </key>
 <V._USING_THE_HCM_MODEL type="str">
  SECTION TOO SHORT TO SUMMARIZE!
 </V._USING_THE_HCM_MODEL>
 <A._Collaboration_and_HCM_Evolution type="str">
  The original connected component shrinks significantly if we remove edges with w &lt; 3 for Firefox and w &lt; 5 for Eclipse, but after that, even if we increase t cut , (until t cut = 118 for Eclipse and t cut = 206), the connected component do not change. The clique is stable over time: We observed that only 3 contributors in Firefox and 1 contributor in Eclipse were discarded from the clique (tier 1), i.e., were present in the 2006 snapshot but not anymore in the 2008 and 2010 snapshots. This indicates the stability of the clique and strengthens our claim that contributors in the clique serve all possible roles. This observation validates our claim that the tier a contributor belongs to is an indicator of her expertise level and that promotion from a lower-level tier to higher-level tier would require demonstration of significant contributions. Ad- ditionally, this demonstrates that the promotion of a contributor in the expertise hierarchy is merit-based.
 </A._Collaboration_and_HCM_Evolution>
 <key name="3) Expertise Breadth vs. Depth:" type="str">
  We hypothesize that contributors who gain familiarity with multiple components of the same project gain expertise quicker than those contributors familiar with a single component. To validate this hypothesis, we update each contributor's profile with a list of components they have worked on in Firefox and Eclipse. We found that contributors in the clique have worked on at least 80.71% (Firefox) and 69.88% (Eclipse) of sub-components. Also, within the clique we see two different distributions for both projects: (1) breadth- experts: contributors who have worked on at least 52.31% (Firefox) and 44.55% (Eclipse) of the components, and (2) depth-experts: the remaining contributors who have worked on a single component only. We found that people who are breadth-experts are senior contributors, as opposed to depth- experts who are junior members.
 </key>
 <B._Predicting_Role_Profiles_Using_HCM type="str">
  The HCM encodes significant information concisely, and an indication of this is that it can be used to predict the role profile of a developer D. This ability to predict role profiles from the HCM is crucial, since, as we explained in Section IV, the HCM can be constructed even for projects where certain source code and bug information might be unavailable. We now proceed to defining our model, then evaluating its accuracy, and finally showing that predictors constructed using standard expertise metrics have poor prediction accuracy. Defining the prediction model. With that in hand, we construct a role predictor based on the HCM, i.e., a function f that, given HCM data for developer D, outputs the role profile of D: The definition of function f for bug-based roles is shown in Algorithm 1, while for source-based roles in Algorithm 2; we now proceed to explain these definitions. The cases T ier D = 1 are based on the observation that contributors in the upper hierarchy (clique) are likely to have participated in all roles.
 </B._Predicting_Role_Profiles_Using_HCM>
 <Algorithm_1_Definition_of_f_for_predicting_bug-based_role_profile_of_contributor_D type="str">
  if For Algorithm 2, note that Core developers and Fixers are assigned new features or bug fixes by others (therefore high InDegree D ) and then they pass on their code to either Patch-quality improvers or Testers (hence high OutDegree D ) Patch-quality improvers accept code improvement requests from others (high InDegree D ) but do not re-assign code (low OutDegree D ). The other cases follow similarly. As shown in , we use the function f defined above to predict the role profile of D, and then compare this predicted role profile with the role profiles we computed in Section III (i.e., the latter serves as reference output). To answer this question, we first used the contributor expertise profiles (the tuples described in Sec- tion II-B) as input to the EM clustering algorithm . After EM has determined clusters, we measured the fit between EM clusters and roles as the ratio between the number of pairs of contributors D 1 , D 2 who serve role R and are in the same cluster over the total number of pairs of contributors D 1 , D 2 who serve role R. Put another way, this ratio tells us how many developers D with similar role R are within a cluster.
 </Algorithm_1_Definition_of_f_for_predicting_bug-based_role_profile_of_contributor_D>
 <VI._THREATS_TO_VALIDITY type="str">
  External Validity: Our expertise profiles and role def- initions assume access to the source and bug repositories; this data might not be available in all projects, hence by selecting projects which have this information-Firefox and Eclipse-our study might be vulnerable to selection bias. The "core developer" and "tester" role we define in our work consists of programmers with diverse technical skills. Alonso et al.  quantify developer expertise based on the number of associated files and differentiate between developers and contributors in the Apache project (75 developers, 8 years evolution). However, they do not quantify contributor role or expertise using a wide-range of expertise attributes or use contributor hierarchy as a proxy for developer expertise. Our work is significantly different in four ways: (1) we couple the source-code and bug-based expertise of contribu- tors while all prior studies used only one when quantifying contributor expertise, (2) we define and differentiate a con- tributor's role from her expertise, (3) we demonstrate that the collaboration-based hierarchy is an effective way to estimate a contributor's role from her expertise profile, and (4) we differentiate between expertise breadth and expertise depth.
 </VI._THREATS_TO_VALIDITY>
 <VIII._CONCLUSIONS type="str">
  SECTION TOO SHORT TO SUMMARIZE!
 </VIII._CONCLUSIONS>
</root>